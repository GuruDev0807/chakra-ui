{"componentChunkName":"component---src-templates-docs-js","path":"/docs/components/icon","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Icon\",\n  \"package\": \"@chakra-ui/icon\",\n  \"image\": \"components/icon.svg\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"icon\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Icon\"), mdx(\"p\", null, \"The icon component renders \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"svg\"), \" icons. Chakra UI provides basic interface\\nicons. To add custom icons, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#adding-custom-icons\"\n  }), \"read the guide\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Avoid passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \" handlers to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Icon\"), \" component. If you need a\\nclickable icon, use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/icon-button\"\n  }), \"IconButton\"), \" instead.\")), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/icon\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Icon } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"p\", null, \"Use an icon by passing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" prop. This name must match an icon key in\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.icons\"), \". By default, the icon inherits the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fontSize\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" of its\\nparent.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack direction=\\\"row\\\">\\n  {/* Default size is 1em => 16px */}\\n  <PhoneIcon />\\n\\n  {/* Use the `size` prop to change the icon size */}\\n  <CheckCircleIcon size=\\\"24px\\\" />\\n\\n  {/* Use the `color` prop to change the icon color */}\\n  <WarningIcon boxSize=\\\"32px\\\" color=\\\"red.500\\\" />\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"all-icons\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"All Icons\"), mdx(\"p\", null, \"Here's a list of the default icons Chakra UI comes with and their respective\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \". You can add your own icons as well;\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#adding-custom-icons\"\n  }), \"see the guide\"), \".\"), mdx(IconsList, {\n    mdxType: \"IconsList\"\n  }), mdx(\"h2\", {\n    \"id\": \"using-an-icon-library\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Using an icon library\"), mdx(\"p\", null, \"You might need to use icons from a popular icon library like\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://react-icons.netlify.com/\"\n  }), \"react-icons\"), \". Here's how to go about it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"// 1. import the icon from \\\"react-icons\\\"\\nimport { MdSettings } from \\\"react-icons/md\\\"\\n\\n// 2. Use the `as` prop to render the icon\\n<Box as={MdSettings} />\\n\\n// 3. Then you can pass all `Box` props to style the icon\\n<Box as={MdSettings} size=\\\"32px\\\" color=\\\"green.400\\\" />\\n\")), mdx(\"p\", null, \"Here's a working example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Box as={MdSettings} size=\\\"32px\\\" color=\\\"green.400\\\" />\\n\")), mdx(\"h2\", {\n    \"id\": \"adding-custom-icons\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Adding custom icons\"), mdx(\"p\", null, \"All Chakra icons are stored in the theme object under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icons\"), \" key. You can\\nextend this object to add your own icons. Here are the steps:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Export the icon's \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"svg\"), \" from Figma, Sketch, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use a tool like \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://svgomg.firebaseapp.com\"\n  }), \"SvgOmg\"), \" to reduce the size\\nand minify the markup.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add the icon to the theme object.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fill=currentColor\"), \" attribute to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"g\"), \" so that when you\\nuse \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Icon color=\\\"gray.200\\\"/>\"), \", it works correctly.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"\\n// Step 1: Each icon should be stored as an object of `path` and `viewBox`\\nconst customIcons = {\\n  icon1: {\\n    path: <path fill=\\\"currentColor\\\" d=\\\"...\\\" />,\\n    // If the icon's viewBox is `0 0 24 24`, you can ignore `viewBox`\\n    viewBox: \\\"0 0 40 40\\\",\\n  },\\n  icon2: {\\n    path: (\\n      <g fill=\\\"currentColor\\\">\\n        <path d=\\\"...\\\"/>\\n      </g>\\n    )\\n  }\\n};\\n\\n\\n// Step 2: Add the custom icon to the theme\\nconst customTheme = {\\n  ...theme,\\n  icons: {\\n    ...theme.icons,\\n    ...customIcons,\\n  }\\n}\\n\\n// Step 3: Pass the new theme to the ThemeProvider\\n\\n<ThemeProvider theme={customTheme}>\\n  {/* app goes here */}\\n</ThemeProvider>\\n\\n// Step 4: Now you can do this\\n<Icon name=\\\"icon1\\\" color=\\\"green.200\\\"/>\\n\")), mdx(\"h3\", {\n    \"id\": \"icon-fallbacks\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Icon Fallbacks\"), mdx(\"p\", null, \"If you pass an icon name that doesn't exist in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.icons\"), \" , you'll see the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"question-outline\"), \" icon.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Icon name=\\\"naruto\\\" />\\n\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"p\", null, \"Icon component composes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" so you can pass all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" props.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"size\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"1em\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The size of the icon.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"name\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The name of the icon.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"color\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"currentColor\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The color of the icon.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"focusable\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Denotes that the icon is not an interative element, and only used for presentation.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"role\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"presentation\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"img\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"presentation\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The html role of the icon.\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Icon","description":null},"tableOfContents":{"items":[{"url":"#icon","title":"Icon","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#all-icons","title":"All Icons"}]},{"url":"#using-an-icon-library","title":"Using an icon library"},{"url":"#adding-custom-icons","title":"Adding custom icons","items":[{"url":"#icon-fallbacks","title":"Icon Fallbacks"}]},{"url":"#props","title":"Props"}]}]}}},"pageContext":{"slug":"/docs/components/icon","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/heading.mdx","frontmatter":{"title":"Heading","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/heading"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/iconbutton.mdx","frontmatter":{"title":"Icon Button","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/iconbutton"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/docs/components/icon.mdx"}}}