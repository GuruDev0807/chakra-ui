{"componentChunkName":"component---src-templates-docs-js","path":"/theming/overview","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Introduction\",\n  \"description\": \"Documentation for the component theming API.\",\n  \"order\": 1\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"theming-api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Theming API\"), mdx(\"p\", null, \"Chakra provides a theming API that makes it easy to build fully customizable,\\ntheme-aware components directly from the theme object.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uD83D\\uDEA8 This API is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"completely optional\"), \" and should be used only when you need\\nto customize or create custom components.\")), mdx(\"h2\", {\n    \"id\": \"style-modifiers\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Style modifiers\"), mdx(\"p\", null, \"A reusable and themable component consists of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"baseStyle\"), \", which refers to\\nthe default or common style, and modifier styles which alter the change the\\nappearance of the component.\"), mdx(\"p\", null, \"The most common style modifiers are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Size:\"), \" a component can have different sizes (small, medium, large)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Variant:\"), \" a component can different visual styles (outline, solid, ghost)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Color scheme:\"), \" for a given variant, a component can have different color\\nschemes. For example, an outline button with a red color scheme.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Color mode:\"), \" a component can change its visual styles based on color mode\\n(light or dark).\")), mdx(\"p\", null, \"We created a simple API to help you build reusable and themeable components.\"), mdx(\"h2\", {\n    \"id\": \"the-api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"The API\"), mdx(\"p\", null, \"In styled components, you usually do this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"const Button = styled(\\\"button\\\")({\\n  // any style you can imagine goes here\\n})\\n\")), mdx(\"p\", null, \"With chakra theming API, we defined some constraints to keep your styling\\nconsistent. Here's what you'll do:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"const Button = chakra(\\\"button\\\", {\\n  // base or default styles\\n  baseStyle: {...},\\n  // styles for the different sizes\\n  sizes: {...}\\n  // styles for the different visual styles\\n  variants: {...}\\n  // reference styles in the theme\\n  themeKey: \\\"\\\"\\n  // attach props\\n  attrs: {...}\\n})\\n\")), mdx(\"h2\", {\n    \"id\": \"quick-example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Quick Example\"), mdx(\"p\", null, \"Let's say you need to create a simple badge component with the following spec.\"), mdx(BadgeSpec, {\n    mdxType: \"BadgeSpec\"\n  }), mdx(\"p\", null, \"First thing we notice is that the badge has \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"common styles\"), \" across all its\\nvariants. Here's how we'll model that:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"const Badge = chakra(\\\"span\\\", {\\n  baseStyle: {\\n    fontSize: \\\"12px\\\",\\n    fontWeight: \\\"bold\\\",\\n    textTransform: \\\"uppercase\\\",\\n    color: \\\"white\\\",\\n  },\\n})\\n\")), mdx(\"p\", null, \"Next, the badge has 4 variants: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"in-progress\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"removed\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default\"), \".\\nHere's how we'll model that:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"const Badge = chakra(\\\"span\\\", {\\n  variants: {\\n    inProgress: { bg: \\\"blue.600\\\" },\\n    new: { bg: \\\"purple.600\\\" },\\n    removed: { bg: \\\"red.600\\\" },\\n    default: { bg: \\\"gray.600\\\" },\\n  },\\n})\\n\")), mdx(\"p\", null, \"Bringing it all together:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"const Badge = chakra(\\\"span\\\", {\\n  baseStyle: {\\n    fontSize: \\\"12px\\\",\\n    fontWeight: \\\"bold\\\",\\n    textTransform: \\\"uppercase\\\",\\n    color: \\\"white\\\",\\n  },\\n  variants: {\\n    inProgress: { bg: \\\"blue.600\\\" },\\n    new: { bg: \\\"purple.600\\\" },\\n    removed: { bg: \\\"red.600\\\" },\\n    default: { bg: \\\"gray.600\\\" },\\n  },\\n})\\n\\n// Pro tip: Set the default variant with `defaultProps`\\nBadge.defaultProps = {\\n  variant: \\\"default\\\",\\n}\\n\")), mdx(\"p\", null, \"That's it! Now you have a solid structure your team can use to create new\\nvariants or improve the base styles.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Introduction","description":"Documentation for the component theming API."},"tableOfContents":{"items":[{"url":"#theming-api","title":"Theming API","items":[{"url":"#style-modifiers","title":"Style modifiers"},{"url":"#the-api","title":"The API"},{"url":"#quick-example","title":"Quick Example"}]}]}}},"pageContext":{"slug":"/theming/overview","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/layout/wrap.mdx","frontmatter":{"title":"Wrap","order":null},"fields":{"collection":"layout","slug":"/layout/wrap"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/theming/simple.mdx","frontmatter":{"title":"Basic","order":2},"fields":{"collection":"theming","slug":"/theming/simple"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/theming/overview.mdx"}}}