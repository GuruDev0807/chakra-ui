{"componentChunkName":"component---src-templates-docs-js","path":"/docs/components/alertdialog","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Alert Dialog\",\n  \"package\": \"@chakra-ui/alert-dialog\",\n  \"image\": \"components/alert-dialog.svg\",\n  \"description\": \"AlertDialog component is used interrupt the user with a mandatory confirmation or action.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"alert-dialog\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Alert Dialog\"), mdx(\"p\", null, \"AlertDialog component is used to interrupt the user with a mandatory\\nconfirmation or action.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/alert-dialog\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"p\", null, \"Chakra UI exports 7 alert dialog related components.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AlertDialog\"), \": provides context and state for the dialog.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AlertDialogHeader\"), \": should contain the title announced by screen readers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AlertDialogBody\"), \": should contain the description announced by screen readers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AlertDialogFooter\"), \": should contain the actions of the dialog.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AlertDialogOverlay\"), \": The dimmed overlay behind the dialog.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AlertDialogContent\"), \": The wrapper for the alert dialog's content.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AlertDialogCloseButton\"), \": The button that closes the dialog.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {\\n  AlertDialog,\\n  AlertDialogBody,\\n  AlertDialogFooter,\\n  AlertDialogHeader,\\n  AlertDialogContent,\\n  AlertDialogOverlay,\\n} from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"p\", null, \"AlertDialog requires that you provide the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"leastDestructiveRef\"), \" prop.\"), mdx(\"p\", null, \"Based on\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.w3.org/TR/wai-aria-practices/#alertdialog\"\n  }), \"WAI-ARIA specifications\"), \",\\nfocus should be placed on the least destructive element when the dialog opens,\\nto prevent users from accidentally confirming the destructive action.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function AlertDialogExample() {\\n  const [isOpen, setIsOpen] = React.useState()\\n  const onClose = () => setIsOpen(false)\\n  const cancelRef = React.useRef()\\n\\n  return (\\n    <>\\n      <Button colorScheme=\\\"red\\\" onClick={() => setIsOpen(true)}>\\n        Delete Customer\\n      </Button>\\n\\n      <AlertDialog\\n        isOpen={isOpen}\\n        leastDestructiveRef={cancelRef}\\n        onClose={onClose}\\n      >\\n        <AlertDialogOverlay>\\n          <AlertDialogContent>\\n            <AlertDialogHeader fontSize=\\\"lg\\\" fontWeight=\\\"bold\\\">\\n              Delete Customer\\n            </AlertDialogHeader>\\n\\n            <AlertDialogBody>\\n              Are you sure? You can't undo this action afterwards.\\n            </AlertDialogBody>\\n\\n            <AlertDialogFooter>\\n              <Button ref={cancelRef} onClick={onClose}>\\n                Cancel\\n              </Button>\\n              <Button colorScheme=\\\"red\\\" onClick={onClose} ml={3}>\\n                Delete\\n              </Button>\\n            </AlertDialogFooter>\\n          </AlertDialogContent>\\n        </AlertDialogOverlay>\\n      </AlertDialog>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"adding-transitions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Adding transitions\"), mdx(\"p\", null, \"The modal doesn't come with any transitions by default so you can manage this\\nyourself. Chakra exports two transition components (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SlideFade\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fade\"), \") to\\nprovide simple transitions.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"When adding transitions, kindly pay attention to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"timeout\"), \" for the overlay\\nand content transitions. In this example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fade\"), \" transitions slower than the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SlideFade\"), \" for it to work correctly.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function TransitionExample() {\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n  const cancelRef = React.useRef()\\n\\n  return (\\n    <>\\n      <Button onClick={onOpen}>Discard</Button>\\n      <Fade timeout={300} in={isOpen}>\\n        {(styles) => (\\n          <AlertDialog\\n            leastDestructiveRef={cancelRef}\\n            onClose={onClose}\\n            isOpen={true}\\n            isCentered\\n          >\\n            <AlertDialogOverlay style={styles}>\\n              <SlideFade timeout={150} in={isOpen} unmountOnExit={false}>\\n                {(styles) => (\\n                  <AlertDialogContent style={styles}>\\n                    <AlertDialogHeader>Discard Changes?</AlertDialogHeader>\\n                    <AlertDialogCloseButton />\\n                    <AlertDialogBody>\\n                      Are you sure you want to discard all of your notes? 44\\n                      words will be deleted.\\n                    </AlertDialogBody>\\n                    <AlertDialogFooter>\\n                      <Button ref={cancelRef} onClick={onClose}>\\n                        No\\n                      </Button>\\n                      <Button colorScheme=\\\"red\\\" ml={3}>\\n                        Yes\\n                      </Button>\\n                    </AlertDialogFooter>\\n                  </AlertDialogContent>\\n                )}\\n              </SlideFade>\\n            </AlertDialogOverlay>\\n          </AlertDialog>\\n        )}\\n      </Fade>\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accessibility\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"AlertDialog has role \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"alertdialog\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-modal\"), \" set to true.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When the dialog opens, focus is automatically set to the least destructive\\nelement.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When the dialog opens, the content in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AlertDialogHeader\"), \" and\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AlertDialogBody\"), \" are announced by screen readers via \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-labelledby\"), \" and\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-describedby\"), \" attributes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clicking on the overlay closes the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AlertDialog\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pressing \", mdx(\"kbd\", null, \"esc\"), \" closes the dialog.\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"p\", null, \"AlertDialog and its components compose the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Modal\"), \" component. The only exception\\nis that it requires a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"leastDestructiveRef\"), \" which is similar to the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialFocusRef\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Modal\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"leastDestructiveRef (required)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.Ref\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The least destructive action to get focus when dialog is open\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Alert Dialog","description":"AlertDialog component is used interrupt the user with a mandatory confirmation or action."},"tableOfContents":{"items":[{"url":"#alert-dialog","title":"Alert Dialog","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#adding-transitions","title":"Adding transitions"}]},{"url":"#accessibility","title":"Accessibility"},{"url":"#props","title":"Props"}]}]}}},"pageContext":{"slug":"/docs/components/alertdialog","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/alert.mdx","frontmatter":{"title":"Alert","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/alert"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/avatar.mdx","frontmatter":{"title":"Avatar","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/avatar"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/docs/components/alertdialog.mdx"}}}