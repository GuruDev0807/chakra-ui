{"componentChunkName":"component---src-templates-docs-js","path":"/docs/components/numberinput","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Number Input\",\n  \"package\": \"@chakra-ui/number-input\",\n  \"image\": \"components/number-input.svg\",\n  \"description\": \"The NumberInput component is similar to the Input component, but it has controls for incrementing or decrementing numeric values.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"number-input\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Number Input\"), mdx(\"p\", null, \"The NumberInput component is similar to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/input\"\n  }), \"Input\"), \" component, but it\\nhas controls for incrementing or decrementing numeric values.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/number-input\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"p\", null, \"It follows the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\"\n  }), \"WAI-ARIA authoring practices\"), \"\\nfor the Spinbutton widget.\"), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"p\", null, \"Chakra UI exports 5 components for the NumberInput.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NumberInput\"), \": The wrapper that provides context and logic to the components.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NumberInputField\"), \": The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"input\"), \" field itself.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NumberInputStepper\"), \": The wrapper for the input's stepper buttons.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NumberIncrementStepper\"), \": The button to increment the value of the input.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NumberDecrementStepper\"), \": The button to decrement the value of the input.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {\\n  NumberInput,\\n  NumberInputField,\\n  NumberInputStepper,\\n  NumberIncrementStepper,\\n  NumberDecrementStepper,\\n} from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NumberInput\"), \" is composed of smaller components to give you control of the\\nstyling of each part.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<NumberInput>\\n  <NumberInputField />\\n  <NumberInputStepper>\\n    <NumberIncrementStepper />\\n    <NumberDecrementStepper />\\n  </NumberInputStepper>\\n</NumberInput>\\n\")), mdx(\"h3\", {\n    \"id\": \"setting-a-minimum-and-minimum-value\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Setting a minimum and minimum value\"), mdx(\"p\", null, \"Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min\"), \" prop or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max\"), \" prop to set an upper and lower limit for the input.\\nBy default, the input will restrict the value to stay within the specified\\nrange.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<NumberInput defaultValue={15} min={10} max={20}>\\n  <NumberInputField />\\n  <NumberInputStepper>\\n    <NumberIncrementStepper />\\n    <NumberDecrementStepper />\\n  </NumberInputStepper>\\n</NumberInput>\\n\")), mdx(\"h3\", {\n    \"id\": \"setting-the-step-size\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Setting the step size\"), mdx(\"p\", null, \"Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step\"), \" prop to change the step size when you increment or decrement the\\nvalue. By default, the value is rounded to match the number of decimals in the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<NumberInput step={5} defaultValue={15} min={10} max={30}>\\n  <NumberInputField />\\n  <NumberInputStepper>\\n    <NumberIncrementStepper />\\n    <NumberDecrementStepper />\\n  </NumberInputStepper>\\n</NumberInput>\\n\")), mdx(\"h3\", {\n    \"id\": \"adjusting-the-precision-of-the-value\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Adjusting the precision of the value\"), mdx(\"p\", null, \"In some cases, you might need the value to be rounded to specific decimal\\npoints. Simply pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"precision\"), \" prop and set it to the number of decimal\\npoints.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<NumberInput defaultValue={15} precision={2} step={0.2}>\\n  <NumberInputField />\\n  <NumberInputStepper>\\n    <NumberIncrementStepper />\\n    <NumberDecrementStepper />\\n  </NumberInputStepper>\\n</NumberInput>\\n\")), mdx(\"h3\", {\n    \"id\": \"clamp-value-when-user-blurs-the-input\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Clamp value when user blurs the input\"), mdx(\"p\", null, \"In most cases, users can type custom values in the input field. If the typed\\nvalue is greater than the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max\"), \", the value is reset to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max\"), \" when the user blur\\nout of the input.\"), mdx(\"p\", null, \"To disable this behavior, pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clampValueOnBlur\"), \" and set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In this example, try to type a value greater than the max. It won't reset the\\nvalue on blur.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<NumberInput defaultValue={15} max={30} clampValueOnBlur={false}>\\n  <NumberInputField />\\n  <NumberInputStepper>\\n    <NumberIncrementStepper />\\n    <NumberDecrementStepper />\\n  </NumberInputStepper>\\n</NumberInput>\\n\")), mdx(\"h3\", {\n    \"id\": \"allowing-out-of-range-values\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Allowing out of range values\"), mdx(\"p\", null, \"In some scenarios, you might not want to block out of range values. Pass the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keepWithinRange\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clampValueOnBlur\"), \" props and set them to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" to\\nsupport this use case.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The NumberInput will be set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isInvalid\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" internally when the value is\\nout of range. Out of range means that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" is great than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max\"), \" or less\\nthan \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min\"), \".\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<NumberInput\\n  defaultValue={15}\\n  max={10}\\n  keepWithinRange={false}\\n  clampValueOnBlur={false}\\n>\\n  <NumberInputField />\\n  <NumberInputStepper>\\n    <NumberIncrementStepper />\\n    <NumberDecrementStepper />\\n  </NumberInputStepper>\\n</NumberInput>\\n\")), mdx(\"h3\", {\n    \"id\": \"formatting-and-parsing-the-value\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Formatting and Parsing the value\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function Example() {\\n  const format = (val) => `$` + val\\n  const parse = (val) => val.replace(/^\\\\$/, \\\"\\\")\\n\\n  const [value, setValue] = React.useState(\\\"1.53\\\")\\n\\n  return (\\n    <NumberInput\\n      onChange={(valueString) => setValue(parse(valueString))}\\n      value={format(value)}\\n      max={50}\\n    >\\n      <NumberInputField />\\n      <NumberInputStepper>\\n        <NumberIncrementStepper />\\n        <NumberDecrementStepper />\\n      </NumberInputStepper>\\n    </NumberInput>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"changing-the-size-of-the-input\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the size of the input\"), mdx(\"p\", null, \"Like the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Input\"), \" component, you can pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop to change the size of\\nthe input.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack shouldWrapChildren isInline>\\n  <NumberInput size=\\\"sm\\\" defaultValue={15} min={10}>\\n    <NumberInputField />\\n    <NumberInputStepper>\\n      <NumberIncrementStepper />\\n      <NumberDecrementStepper />\\n    </NumberInputStepper>\\n  </NumberInput>\\n\\n  <NumberInput size=\\\"md\\\" defaultValue={15} min={10}>\\n    <NumberInputField />\\n    <NumberInputStepper>\\n      <NumberIncrementStepper />\\n      <NumberDecrementStepper />\\n    </NumberInputStepper>\\n  </NumberInput>\\n\\n  <NumberInput size=\\\"lg\\\" defaultValue={15} min={10}>\\n    <NumberInputField />\\n    <NumberInputStepper>\\n      <NumberIncrementStepper />\\n      <NumberDecrementStepper />\\n    </NumberInputStepper>\\n  </NumberInput>\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"changing-the-styles\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the styles\"), mdx(\"p\", null, \"You can change the style of any part of the components using style props. You\\ncan also change the icons used in the steppers.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<NumberInput size=\\\"sm\\\" defaultValue={15} min={10}>\\n  <NumberInputField focusBorderColor=\\\"red.200\\\" />\\n  <NumberInputStepper>\\n    <NumberIncrementStepper\\n      bg=\\\"green.200\\\"\\n      _active={{ bg: \\\"green.300\\\" }}\\n      children=\\\"+\\\"\\n    />\\n    <NumberDecrementStepper\\n      bg=\\\"pink.200\\\"\\n      _active={{ bg: \\\"pink.300\\\" }}\\n      children=\\\"-\\\"\\n    />\\n  </NumberInputStepper>\\n</NumberInput>\\n\")), mdx(\"h3\", {\n    \"id\": \"combining-it-with-a-slider\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Combining it with a Slider\"), mdx(\"p\", null, \"A common use case is to combine the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NumberInput\"), \" with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Slider\"), \". Here's an\\nexample of how to do that:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function SliderInput() {\\n  const [value, setValue] = React.useState(0)\\n  const handleChange = (value) => setValue(value)\\n\\n  return (\\n    <Flex>\\n      <NumberInput maxW=\\\"100px\\\" mr=\\\"2rem\\\" value={value} onChange={handleChange}>\\n        <NumberInputField />\\n        <NumberInputStepper>\\n          <NumberIncrementStepper />\\n          <NumberDecrementStepper />\\n        </NumberInputStepper>\\n      </NumberInput>\\n      <Slider flex=\\\"1\\\" value={value} onChange={handleChange}>\\n        <SliderTrack>\\n          <SliderFilledTrack />\\n        </SliderTrack>\\n        <SliderThumb fontSize=\\\"sm\\\" boxSize=\\\"32px\\\" children={value} />\\n      </Slider>\\n    </Flex>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"create-a-mobile-spinner\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Create a mobile spinner\"), mdx(\"p\", null, \"Sometimes, you might need to create a mobile version of the number input. Here's\\nhow you can leverage the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useNumberInput\"), \" hook to build one.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function HookUsage() {\\n  const {\\n    getInputProps,\\n    getIncrementButtonProps,\\n    getDecrementButtonProps,\\n  } = useNumberInput({\\n    step: 0.01,\\n    defaultValue: 1.53,\\n    min: 1,\\n    max: 6,\\n    precision: 2,\\n  })\\n\\n  const inc = getIncrementButtonProps()\\n  const dec = getDecrementButtonProps()\\n  const input = getInputProps({ isReadOnly: true })\\n\\n  return (\\n    <HStack maxW=\\\"320px\\\">\\n      <Button {...inc}>+</Button>\\n      <Input {...input} />\\n      <Button {...dec}>-</Button>\\n    </HStack>\\n  )\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accessibility\"), mdx(\"h3\", {\n    \"id\": \"aria-roles\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Aria Roles\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The input has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"role\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"spinbutton\"), \" to denote that users are to select\\nfrom a range of discrete values using an up and down arrows on the keyboard.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The input has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-valuemin\"), \" set to the minimum value allowed for the\\nspinbutton.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The input has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-valuemax\"), \" set to the maximum value allowed for the\\nspinbutton. attribute should be applied to the spinbutton.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The input has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-valuenow\"), \" set to the current value of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"input\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The custom spinner (up and down buttons) has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-hidden\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" to\\nmake them invisible to screen readers.\")), mdx(\"h3\", {\n    \"id\": \"keyboard-navigation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Keyboard Navigation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When you hit the \", mdx(\"kbd\", null, \"\\u2B06\"), \" or \", mdx(\"kbd\", null, \"\\u2B07\"), \" key, the input value will be\\nincreased or decreased by \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"step\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Holding down \", mdx(\"kbd\", null, \"Shift\"), \" and pressing \", mdx(\"kbd\", null, \"\\u2B06\"), \" or \", mdx(\"kbd\", null, \"\\u2B07\"), \" will\\nupdate the value by \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"10 * step\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Holding down \", mdx(\"kbd\", null, \"Ctrl\"), \" or \", mdx(\"kbd\", null, \"\\u2318\"), \", and pressing \", mdx(\"kbd\", null, \"\\u2B06\"), \" or\", mdx(\"kbd\", null, \"\\u2B06\"), \" will update the value by `0.1 * step`.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Long pressing the up and down stepper buttons will update the value at\\nintervals.\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"numberinput-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"NumberInput Props\"), mdx(\"p\", null, \"NumberInput composes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Flex\"), \" with some additional props listed below.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"value\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The value of the input for controlled usage. Should be less than \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"max\"), \" and greater than \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"min\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"defaultValue\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The initial value of the input. Should be less than \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"max\"), \" and greater than \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"min\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onChange\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(value: number) => void\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The callback fired when the value changes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"min\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"-Infinity\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The maximum value of the input\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"max\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Infinity\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The minimum value of the input\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"step\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"1\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The step used to increment or decrement the value\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"precision\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The number of decimal points used to round the value\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isReadOnly\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the input will be in readonly mode\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isInvalid\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the input will have \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-invalid\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isDisabled\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the input will be disabled\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"keepWithinRange\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" and you use the stepper or up/down arrow keys, the value will not exceed the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"max\"), \" or go lower than \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"min\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"clampValueOnBlur\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" and the value is greater than \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"max\"), \", the value will be reset to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"max\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"focusInputOnChange\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the input will be focused as you increment or decrement the value with the stepper\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"getAriaValueText\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(value: number) => string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"It is used to set the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-valuetext\"), \" property of the input\")))), mdx(\"h3\", {\n    \"id\": \"numberinputfield-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"NumberInputField Props\"), mdx(\"p\", null, \"NumberInput composes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Input\"), \" so you can pass all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Input\"), \" props.\"), mdx(\"h3\", {\n    \"id\": \"numberinputstepper-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"NumberInputStepper Props\"), mdx(\"p\", null, \"NumberInputStepper composes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Flex\"), \" so you can pass all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Flex\"), \" props.\"), mdx(\"h3\", {\n    \"id\": \"numberdecrementstepper-and-numberincrementstepper-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"NumberDecrementStepper and NumberIncrementStepper Props\"), mdx(\"p\", null, \"NumberDecrementStepper and NumberIncrementStepper composes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" props so\\nyou can pass all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" props.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Number Input","description":"The NumberInput component is similar to the Input component, but it has controls for incrementing or decrementing numeric values."},"tableOfContents":{"items":[{"url":"#number-input","title":"Number Input","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#setting-a-minimum-and-minimum-value","title":"Setting a minimum and minimum value"},{"url":"#setting-the-step-size","title":"Setting the step size"},{"url":"#adjusting-the-precision-of-the-value","title":"Adjusting the precision of the value"},{"url":"#clamp-value-when-user-blurs-the-input","title":"Clamp value when user blurs the input"},{"url":"#allowing-out-of-range-values","title":"Allowing out of range values"},{"url":"#formatting-and-parsing-the-value","title":"Formatting and Parsing the value"},{"url":"#changing-the-size-of-the-input","title":"Changing the size of the input"},{"url":"#changing-the-styles","title":"Changing the styles"},{"url":"#combining-it-with-a-slider","title":"Combining it with a Slider"},{"url":"#create-a-mobile-spinner","title":"Create a mobile spinner"}]},{"url":"#accessibility","title":"Accessibility","items":[{"url":"#aria-roles","title":"Aria Roles"},{"url":"#keyboard-navigation","title":"Keyboard Navigation"}]},{"url":"#props","title":"Props","items":[{"url":"#numberinput-props","title":"NumberInput Props"},{"url":"#numberinputfield-props","title":"NumberInputField Props"},{"url":"#numberinputstepper-props","title":"NumberInputStepper Props"},{"url":"#numberdecrementstepper-and-numberincrementstepper-props","title":"NumberDecrementStepper and NumberIncrementStepper Props"}]}]}]}}},"pageContext":{"slug":"/docs/components/numberinput","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/modal.mdx","frontmatter":{"title":"Modal","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/modal"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/popover.mdx","frontmatter":{"title":"Popover","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/popover"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/docs/components/numberinput.mdx"}}}