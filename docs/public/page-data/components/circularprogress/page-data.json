{"componentChunkName":"component---src-templates-docs-js","path":"/components/circularprogress","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Circular Progress\",\n  \"package\": \"@chakra-ui/progress\",\n  \"image\": \"components/progress.svg\",\n  \"description\": \"Circular Progress is used to indicates the progress for determinate and indeterminate processes.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"circular-progress\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Circular Progress\"), mdx(\"p\", null, \"Circular Progress is used to indicates the progress for determinate and\\nindeterminate processes.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/progress\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Determinate progress: fills the circular track with color, as the indicator\\nmoves from 0 to 360 degrees.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Indeterminate progress: grows and shrinks the indicator while moving along the\\ncircular track.\")), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { CircularProgress, CircularProgressLabel } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CircularProgress value={80} />\\n\")), mdx(\"h3\", {\n    \"id\": \"changing-the-size\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the size\"), mdx(\"p\", null, \"You can add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop to the progressbar to add a custom size.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// Change the size to 120px\\n<CircularProgress value={30} size=\\\"120px\\\" />\\n\")), mdx(\"h3\", {\n    \"id\": \"changing-the-thickness\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the thickness\"), mdx(\"p\", null, \"You can add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"thickness\"), \" prop to update the thickness of the progress ring.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The thickness has to be a ratio of the size. Value should be between 0 and 1.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// 10% of size (100px) => 10px\\n<CircularProgress value={59} size=\\\"100px\\\" thickness={0.1} />\\n\")), mdx(\"h3\", {\n    \"id\": \"changing-the-color\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the color\"), mdx(\"p\", null, \"You can add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" prop to any progressbar to apply any color that exists in\\nthe theme.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CircularProgress value={30} color=\\\"orange\\\" thickness={0.1} />\\n\")), mdx(\"h3\", {\n    \"id\": \"adding-label\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Adding label\"), mdx(\"p\", null, \"Chakra exports a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CircularProgressLabel\"), \" to help you add a label. Pass this\\ncomponent as children and you'll be able to render the value.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CircularProgress value={40} color=\\\"green\\\">\\n  <CircularProgressLabel>40%</CircularProgressLabel>\\n</CircularProgress>\\n\")), mdx(\"h3\", {\n    \"id\": \"indeterminate-progress\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Indeterminate Progress\"), mdx(\"p\", null, \"Setting the progress to indeterminate means you're not able to determine the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" upfront, so you won't need to pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CircularProgress isIndeterminate color=\\\"green\\\"></CircularProgress>\\n\")), mdx(\"h3\", {\n    \"id\": \"accessibility\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accessibility\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Progress has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"role\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"progressbar\"), \" to denote that it's a progress bar\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Progress has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-valuenow\"), \" set to the percentage completion value passed to\\nthe component, to ensure the progress percent is visible to screen readers.\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"size\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"48px\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The size of the circular progress in CSS units\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"max\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"100\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Maximum value defining 100% progress made (must be higher than 'min')\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"min\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Minimum value defining 'no progress' (must be lower than 'max')\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"value\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Current progress (must be between min/max)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isIndeterminate\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Puts the component into 'indeterminate' state; Ignores 'value' prop\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"thickness\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0.2\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The thickness of progress indicator as a ratio of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"size\"), \". Must be between \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"1\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"angle\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Angle to rotate progress indicator by\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"capIsRound\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the cap of the progress indicator will be rounded\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"children\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The content of the circular progress bar. If passed, the content will be inside and centered in the progress bar\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"trackColor\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"gray\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The color name of the progress track. Use a color key in the theme object\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"color\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"blue\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The color of the progress indicator. Use a color key in the theme object\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Circular Progress","description":"Circular Progress is used to indicates the progress for determinate and indeterminate processes."},"tableOfContents":{"items":[{"url":"#circular-progress","title":"Circular Progress","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#changing-the-size","title":"Changing the size"},{"url":"#changing-the-thickness","title":"Changing the thickness"},{"url":"#changing-the-color","title":"Changing the color"},{"url":"#adding-label","title":"Adding label"},{"url":"#indeterminate-progress","title":"Indeterminate Progress"},{"url":"#accessibility","title":"Accessibility"}]},{"url":"#props","title":"Props"}]}]}}},"pageContext":{"slug":"/components/circularprogress","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/checkbox.mdx","frontmatter":{"title":"Checkbox","order":null},"fields":{"collection":"components","slug":"/components/checkbox"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/closebutton.mdx","frontmatter":{"title":"CloseButton","order":null},"fields":{"collection":"components","slug":"/components/closebutton"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/components/circularprogress.mdx"}}}