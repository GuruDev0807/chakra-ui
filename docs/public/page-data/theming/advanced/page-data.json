{"componentChunkName":"component---src-templates-docs-js","path":"/theming/advanced","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Advanced\",\n  \"description\": \"Documentation for the component theming API.\",\n  \"order\": 3\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"theming-api---advanced\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Theming API - Advanced\"), mdx(\"p\", null, \"Now that you understand how to use Chakra UI theming API. Let's take a step\\nfurther and see if we can adapt the button to color mode.\"), mdx(\"p\", null, \"Here's how it works, when defining the styles for the sizes or variants, you can\\neither pass a style object or a function that returns a style object.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"const Button = chakra(\\\"button\\\", {\\n  baseStyle: StyleObjectOrFunction,\\n  sizes: StyleObjectOrFunction,\\n  variants: StyleObjectOrFunction,\\n})\\n\\ntype StyleObjectOrFunction = StyleObject | ((options: Options) => StyleObject)\\n\\ninterface Options {\\n  theme: Theme\\n  colorMode: \\\"light\\\" | \\\"dark\\\"\\n  colorScheme: string\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"using-color-mode\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Using color mode\"), mdx(\"p\", null, \"Here's an example of how to create a simple badge that changes it's background\\nbased on color mode.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Switch to dark mode and see how how the badge background changes\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"manual=true\",\n    \"manual\": \"true\"\n  }), \"const Badge = chakra(\\\"span\\\", {\\n  baseStyle: ({ colorMode }) => ({\\n    bg: colorMode === \\\"dark\\\" ? \\\"green.300\\\" : \\\"green.500\\\",\\n    color: colorMode === \\\"dark\\\" ? \\\"gray.800\\\" : \\\"white\\\",\\n    textTransform: \\\"uppercase\\\",\\n    fontWeight: \\\"semibold\\\",\\n    letterSpacing: \\\"0.02em\\\",\\n    padding: \\\"4px\\\",\\n    borderRadius: \\\"2px\\\",\\n    fontSize: \\\"12px\\\",\\n  }),\\n})\\n\\nrender(<Badge>This is a badge</Badge>)\\n\")), mdx(\"h2\", {\n    \"id\": \"typescript\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"TypeScript\"), mdx(\"p\", null, \"To ensure the props for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" is strongly typed, you can use\\ntypescript generics to improve it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"// 1. Create the type defs\\ninterface Props {\\n  variant?: \\\"solid\\\" | \\\"outline\\\"\\n  size?: \\\"sm\\\" | \\\"md\\\"\\n}\\n\\n// 2. Use it as a generic\\nconst Badge = chakra<\\\"div\\\", Props>(\\\"div\\\", {\\n  /// options\\n})\\n\\n// 3. now you'll get a strongly `variant` and `size` props\\n<Badge variant=\\\"solid\\\">Welcome</Badge>\\n\")), mdx(\"h2\", {\n    \"id\": \"theming-subcomponents\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Theming Subcomponents\"), mdx(\"p\", null, \"Many complex components in Chakra are not a single component, but multiple\\ncomponents that are composed together.\"), mdx(\"p\", null, \"An example of this is Chakra's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Accordion\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Accordion\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccordionItem\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccordionButton\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccordionPanel\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccordionIcon\"), \".\"), mdx(\"p\", null, \"In cases like this, component theming objects can be nested according to their\\nparent using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"themeKey\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Accordion\"), \" uses a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"themeKey\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Accordion.Root\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccordionItem\"), \" uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Accordion.Item\"), \", etc.\"), mdx(\"p\", null, \"Chakra will then look for a nested component theming object in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"const theme = {\\n  components: {\\n    Accordion: {\\n      Root: {\\n        defaultProps: {},\\n        baseStyle: {},\\n        sizes: {},\\n        variants: {},\\n      },\\n      Item: {\\n        defaultProps: {},\\n        baseStyle: {},\\n        sizes: {},\\n        variants: {},\\n      },\\n    },\\n  },\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Advanced","description":"Documentation for the component theming API."},"tableOfContents":{"items":[{"url":"#theming-api---advanced","title":"Theming API - Advanced","items":[{"url":"#using-color-mode","title":"Using color mode"},{"url":"#typescript","title":"TypeScript"},{"url":"#theming-subcomponents","title":"Theming Subcomponents"}]}]}}},"pageContext":{"slug":"/theming/advanced","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/theming/simple.mdx","frontmatter":{"title":"Basic","order":2},"fields":{"collection":"theming","slug":"/theming/simple"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/theming/theme.mdx","frontmatter":{"title":"Default Theme","order":4},"fields":{"collection":"theming","slug":"/theming/theme"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/theming/advanced.mdx"}}}