## 09-11-2021

`@chakra-ui/react@1.7.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Select** `v1.2.0`

- Fixed an styling issue where it was not possible to customize the icon spacing of the `Select` component.
- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Theme** `v1.12.0`

- Fixed an styling issue where it was not possible to customize the icon spacing of the `Select` component.
- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Slider** `v1.5.0`

- fixed the bug in RangeSlider where an index out of bounds error would occur
  incase of stacked thumb
- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Modal** `v1.10.0`

- `react-focus-lock@2.5.1` includes a dependency update of `focus-lock` from
  `0.8.1` -> `0.9.1`. The change in `focus-lock` includes a fix for performance in
  JSDOM: https://github.com/theKashey/focus-lock/pull/24

JSDOM is used when testing react components in jest and other unit testing
frameworks. In particular, when used with `@testing-library/react` for
simulating real user input.

Locally tested on an Apple M1 Air using a moderately complex `<Modal>` component
(which contained inputs, `react-hook-form` usage, etc). Before this change:
20,149ms After this change: 2,347ms

Approx. 10x performance increase.

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Accordion** `v1.4.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Alert** `v1.3.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Anatomy** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Avatar** `v1.3.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Breadcrumb** `v1.3.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Button** `v1.5.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Checkbox** `v1.6.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Clickable** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Close Button** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Color Mode** `v1.3.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

- Fixed color mode behavior priority in the following order:

- if `useSystemColorMode` is true system-color will be used as default - initial
  colormode is the fallback if system color mode isn't resolved

- if `--chakra-ui-color-mode` is defined through e.g. `ColorModeScript` this
  will be used

- if `colorModeManager` = `localStorage` and a value is defined for
  `chakra-ui-color-mode` this will be used

- if `initialColorMode` = `system` system-color will be used as default -
  initial colormode is the fallback if system color mode isn't resolved

- if `initialColorMode` = `'light'|'dark'` the corresponding value will be used

**Control Box** `v1.1.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Counter** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Css Reset** `v1.1.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Descendant** `v2.1.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Editable** `v1.3.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**React Env** `v1.1.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Focus Lock** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Form Control** `v1.5.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Hooks** `v1.7.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Icon** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Icons** `v1.1.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Image** `v1.1.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Input** `v1.3.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Layout** `v1.5.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Live Region** `v1.1.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Media Query** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Menu** `v1.8.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Number Input** `v1.3.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Pin Input** `v1.7.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Popover** `v1.10.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Popper** `v2.4.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Portal** `v1.3.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Progress** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Provider** `v1.7.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Radio** `v1.4.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**React Utils** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Skeleton** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Skip Nav** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Spinner** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Stat** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Styled System** `v1.14.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Switch** `v1.3.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**System** `v1.8.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Table** `v1.3.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Tabs** `v1.6.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Tag** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Test Utils** `v1.1.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Textarea** `v1.2.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Theme Tools** `v1.3.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Toast** `v1.4.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Tooltip** `v1.4.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Transition** `v1.4.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Utils** `v1.9.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Visually Hidden** `v1.1.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.

**Cli** `v1.6.0`

- Update build system we use from a custom babel cli setup to
  [preconstruct](https://preconstruct.tools/).

The previous build system transpiles the code in `src` directory to `dist/esm`
and `dist/cjs` keeping the same file structure. The new build system merges all
files in `src` and transpiles to a single `esm` and `cjs` file.

**Potential Breaking Change:** The side effect of this is that, if you imported
any function, component or hook using the **undocumented** approach like
`import { useOutsideClick } from "@chakra-ui/hooks/dist/use-outside-click"`,
you'll notice that the this doesn't work anymore.

Here's how to resolve it:

```jsx live=false
// Won't work ðŸŽ‡
import { useOutsideClick } from '@chakra-ui/hooks/dist/use-outside-click';

// Works âœ…
import { useOutsideClick } from '@chakra-ui/hooks';
```

If this affected your project, we recommend that you import hooks, functions or
components the way it's shown in the documentation. This will help keep your
project future-proof.
