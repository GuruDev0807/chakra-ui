{"componentChunkName":"component---src-templates-docs-js","path":"/docs/components/iconbutton","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Icon Button\",\n  \"package\": \"@chakra-ui/button\",\n  \"description\": \"Icon button renders an icon within in a button\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"icon-button\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Icon Button\"), mdx(\"p\", null, \"IconButton composes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Button\"), \" component except that it renders only an icon.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/button\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"p\", null, \"Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IconButton\"), \" only renders an icon, you must pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" prop, so\\nscreen readers can give meaning to the button.\"), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { IconButton } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<IconButton aria-label=\\\"Search database\\\" icon={<SearchIcon />} />\\n\")), mdx(\"h3\", {\n    \"id\": \"button-colors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Button Colors\"), mdx(\"p\", null, \"The IconButton component accepts most of the props from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Button\"), \" component,\\nso we can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colorScheme\"), \" prop to change the color of the button.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<IconButton\\n  colorScheme=\\\"blue\\\"\\n  aria-label=\\\"Search database\\\"\\n  icon={<SearchIcon />}\\n/>\\n\")), mdx(\"h3\", {\n    \"id\": \"button-sizes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Button Sizes\"), mdx(\"p\", null, \"Like the Button component, pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop to change the size of the\\nbutton.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<IconButton\\n  colorScheme=\\\"teal\\\"\\n  aria-label=\\\"Call Segun\\\"\\n  size=\\\"lg\\\"\\n  icon={<PhoneIcon />}\\n/>\\n\")), mdx(\"h3\", {\n    \"id\": \"button-variants\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Button Variants\"), mdx(\"p\", null, \"Like the Button component, pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \" prop to change the style of the\\nbutton.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<IconButton\\n  variant=\\\"outline\\\"\\n  colorScheme=\\\"teal\\\"\\n  aria-label=\\\"Send email\\\"\\n  icon={<EmailIcon />}\\n/>\\n\")), mdx(\"h3\", {\n    \"id\": \"with-custom-icon\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"With custom icon\"), mdx(\"p\", null, \"You can also use icons from popular libraries like\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"react-icons.netlify.com\"\n  }), \"react-icons\"), \" and just pass it into the button.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<IconButton\\n  variant=\\\"outline\\\"\\n  colorScheme=\\\"teal\\\"\\n  aria-label=\\\"Call Sage\\\"\\n  fontSize=\\\"20px\\\"\\n  icon={<MdPhone />}\\n/>\\n\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"size\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lg\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Specifies an explicit icon size instead of the default value.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"icon\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The icon to be used. Refer to the \", mdx(\"a\", _extends({\n    parentName: \"td\"\n  }, {\n    \"href\": \"/icon/\"\n  }), \"Icons\"), \" section of the docs for the available icon options.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isRound\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the button will be perfectly round. Else, it'll be slightly round.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"aria-label (required)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"A11y: A label that describes the button.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"variant\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"outline\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ghost\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"unstyled\"), \" , \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"link\"), \" , \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"solid\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"solid\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The variant of the button style to use.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"colorScheme\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"gray\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The color scheme of the button.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isDisabled\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the button will be disabled.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isLoading\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the button will show a spinner.\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Icon Button","description":"Icon button renders an icon within in a button"},"tableOfContents":{"items":[{"url":"#icon-button","title":"Icon Button","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#button-colors","title":"Button Colors"},{"url":"#button-sizes","title":"Button Sizes"},{"url":"#button-variants","title":"Button Variants"},{"url":"#with-custom-icon","title":"With custom icon"}]},{"url":"#props","title":"Props"}]}]}}},"pageContext":{"slug":"/docs/components/iconbutton","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/icon.mdx","frontmatter":{"title":"Icon","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/icon"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/image.mdx","frontmatter":{"title":"Image","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/image"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/docs/components/iconbutton.mdx"}}}