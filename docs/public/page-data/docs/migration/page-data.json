{"componentChunkName":"component---src-templates-docs-js","path":"/docs/migration","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Upgrade to v1\",\n  \"description\": \"A simple guide to upgrade your existing Chakra UI projects to v1.0\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"upgrading-from-v0x-to-v10\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Upgrading from v0.x to v1.0\"), mdx(\"p\", null, \"A simple guide to upgrade your existing Chakra UI projects to v1.0.\"), mdx(\"p\", null, \"Chakra UI v1.0 is focused on improving the ideas and concepts from 0.x to make\\neven easier to create, theme and extend components.\"), mdx(\"p\", null, \"While there's quite a number of new exciting features we've added, we focused on\\nmaking Chakra UI a stable base to build your own design systems on, so that you\\ncan feel more confident using Chakra UI in production.\"), mdx(\"h2\", {\n    \"id\": \"Ô∏è-highlights\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"\\u26A1\\uFE0F Highlights\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Theming API:\"), \" Chakra UI now provides a new theming API which makes it easy to\\nstyle components and their modifiers (sizes, variants, and color scheme) from\\nyour theme or locally using a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chakra\"), \" factory function.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Color Mode improvement:\"), \" We've fixed the bugs related to Color mode and it's\\nnow easy to persist color mode, set initial color mode, and lock specific\\ncomponents to a certain color mode.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Better TypeScript support:\"), \" This means all components have very good\\nTypeScript support and most low-level components like Box, Flex, etc. will\\nsupport the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"as\"), \" prop and types will be extracted properly.\"), mdx(\"h2\", {\n    \"id\": \"upgrade-steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Upgrade steps\"), mdx(\"p\", null, \"Here's a list of steps to take in order to migrate your project safely. Don't\\nworry if your styles aren't exactly the same\\u2014this is to be expected.\"), mdx(\"h3\", {\n    \"id\": \"1-update-your-dependencies\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"1. Update your dependencies\"), mdx(\"p\", null, \"Chakra no longer requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@emotion/styled\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@emotion/core\"), \" and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@emotion/theming\"), \". If you're not using these libraries in your code, you can\\nsafely remove them and update Chakra UI to v1.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"We use only \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@emotion/core\"), \" internally.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\\\"dependencies\\\": {\\n  \\\"@chakra-ui/core\\\": \\\"1.0.0-beta\\\",\\n-  \\\"@emotion/styled\\\": \\\"10.X\\\",\\n-  \\\"@emotion/theming\\\": \\\"10.x\\\",\\n-  \\\"@emotion/core\\\": \\\"10.x\\\"\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note on bundle size:\"), \" Chakra UI now exports all components as separate\\npackages to make it easier to consume individual packages. For example, if you\\nuse only \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Button\"), \", you can now install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@chakra-ui/button\"), \" along side its peer\\ndependency \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@chakra-ui/system\"), \", and you're good to go!\"), mdx(\"h3\", {\n    \"id\": \"2-clone-chakras-default-theme\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"2. Clone Chakra's default theme\"), mdx(\"p\", null, \"Chakra no longer comes with the default theme pre-installed, so you'll need to\\nadd it manually. Luckily for you, we've added a CLI tool for generating the\\ntheme.\"), mdx(\"p\", null, \"We believe that having the theme cloned to your project will help you learn\\nabout the theme tokens (colors, fonts, component styles) and make it less\\nstressful for you to customize them.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npx chakra init --theme\"), \", and we'll clone the theme to your project.\\nThis creates a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chakra\"), \" folder with the default theme inside.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npx chakra init --theme\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Update the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ThemeProvider\"), \" in your application's root by passing the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"theme\"), \"\\nprop.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"import { ThemeProvider, CSSReset } from \\\"@chakra-ui/core\\\"\\nimport theme from \\\"./chakra\\\"\\n\\nfunction AppRoot() {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <CSSReset />\\n      <App />\\n    </ThemeProvider>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"3-update-the-themeprovider\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"3. Update the \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"ThemeProvider\")), mdx(\"p\", null, \"Swap out \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeProvider\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ChakraProvider\"), \" to make setup cleaner.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ChakraProvider\"), \" adds the following providers for you automatically:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ThemeProvider:\"), \" Provides the theming context for all components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ColorModeProvider:\"), \" Provides color mode (light or dark) context to all\\ncomponents\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"PortalManager:\"), \" Manages portals and nested portals without using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"z-index\"), \"\\nin your application.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"GlobalStyle\"), \": Provides the global styles defined in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"theme.styles.global\"), \"\\nto your application.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"-  <ThemeProvider theme={theme}>\\n+    <ChakraProvider theme={theme}>\\n      <CSSReset />\\n      <App />\\n+    </ChakraProvider>\\n-  </ThemeProvider>\\n\")), mdx(\"h3\", {\n    \"id\": \"4-rename-variantcolor-to-colorscheme\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"4. Rename \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"variantColor\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"colorScheme\")), mdx(\"p\", null, \"Fire up your \\\"Find and Replace\\\" tool in VSCode or IntelliJ. Find \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variantColor\"), \"\\nand replace with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colorScheme\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Reason:\"), \" We named this prop to make it easier to understand that this prop\\nrepresents a visual color scheme, not a css color attribute.\")), mdx(\"h3\", {\n    \"id\": \"5-update-layout-size-prop\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"5. Update layout \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"size\"), \" prop\"), mdx(\"p\", null, \"Change \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"width\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"w\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"height\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h\"), \". If you'd like to use\\nonly one prop to manage this, you can rename it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"boxSize\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"- <Box size=\\\"40px\\\" />\\n+ <Box w=\\\"40px\\\" h=\\\"40px\\\" />\\n# or\\n+ <Box boxSize=\\\"40px\\\" />\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"We strongly recommend using the \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"width\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"height\"), \" props\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Reason:\"), \" We think the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop should only be used for component size\\nmodifiers. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop has caused a lot of confusion in the past because\\nin some components (e.g. Button) it means the visual size, and in some (e.g\\nBox), it means \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"width + height\"), \".\")), mdx(\"h3\", {\n    \"id\": \"5-update-these-prop-names\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"5. Update these prop names\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Current Prop\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"New Prop\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"rounded\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"borderRadius\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"roundedLeft\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"borderLeftRadius\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"roundedRight\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"borderRightRadius\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"roundedTop\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"borderTopRadius\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"roundedTopLeft\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"borderTopLeftRadius\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"roundedTopRight\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"borderTopRightRadius\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"roundedBottomLeft\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"borderBottomLeftRadius\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"roundedBottomRight\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"borderBottomRightRadius\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"roundedBottom\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"borderBottomRadius\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"size\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boxSize\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bgImg\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bgImage\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bgPos\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bgPosition\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"shadow\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boxShadow\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"listStyleImg\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"listStyleImage\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"listStylePos\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"listStylePosition\"))))), mdx(\"h2\", {\n    \"id\": \"component-updates\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Component Updates\"), mdx(\"p\", null, \"We've updated the API of some components to fix bugs and improve usability,\\ntypes and accessibility.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All components now take the pseudo style props (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"_hover\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"_active\"), \", etc.)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Improved TypeScript support for the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"as\"), \" prop\")), mdx(\"h3\", {\n    \"id\": \"accordion\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accordion\"), mdx(\"p\", null, \"Can install as a stand-alone package: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@chakra-ui/accordion\")), mdx(\"h4\", {\n    \"id\": \"changes-\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changes \\uD83D\\uDD27\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change all imports of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AccordionHeader\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AccordionButton\"), \". This is to\\nremove the notion that it's a header when it's actually a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"button\"), \".\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"- import { AccordionHeader } from \\\"@chakra-ui/core\\\"\\n+ import { AccordionButton } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"WAI-ARIA guidelines require that accordion buttons be wrapped in the\\nappropriate heading tag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h2-h6\"), \" based on the page heading flow.\")), mdx(\"p\", null, \"We think the name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccordionHeader\"), \" might mislead users to think we handle this\\nout of the box when we don't. Here's how to handle this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"<Accordion>\\n  <AccordionItem>\\n    <h3>\\n      <AccordionButton>This is the button</AccordionButton>\\n    </h3>\\n    <AccordionPanel>This is the content</AccordionPanel>\\n  </AccordionItem>\\n</Accordion>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can no longer use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AccordionItem\"), \" in isolation\\u2014it must be used within\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Accordion\"), \". We think most users don't do this by default but it's worth\\nnoting.\")), mdx(\"h4\", {\n    \"id\": \"features-Ô∏è\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Features \\u26A1\\uFE0F\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Keyboard Navigation:\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Accordion\"), \" now supports keyboard navigation between\\naccordion buttons. Pressing the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"up\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"down\"), \" arrow keys will move focus\\nbetween accordion buttons.\")), mdx(\"h3\", {\n    \"id\": \"aspectratiobox\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"AspectRatioBox\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change all imports of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AspectRatioBox\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AspectRatio\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"- import { AspectRatioBox } from \\\"@chakra-ui/core\\\"\\n+ import  { AspectRatio } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h3\", {\n    \"id\": \"avatar\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Avatar\"), mdx(\"h4\", {\n    \"id\": \"features-Ô∏è-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Features \\u26A1\\uFE0F\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can now use a custom fallback avatar icon by passing the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"icon\"), \" prop:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"<Avatar src=\\\"john.png\\\" name=\\\"John Doe\\\" icon={<UserIcon />} />\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You can now change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"borderRadius\"), \" of the avatar\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Theming Support: All design decisions for the Avatar are located in\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chakra/components/Avatar\"), \" in your cloned theme, which means you can customize\\nthe styles to suit your brand needs.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Added \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getInitials\"), \" prop to allow users to manage how initials are generated\\nfrom name. By default we merge the first characters of each word in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \"\\nprop.\"))), mdx(\"h3\", {\n    \"id\": \"breadcrumb\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Breadcrumb\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Removed support for the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"addSeparator\"), \" prop\")), mdx(\"h3\", {\n    \"id\": \"button\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Button\"), mdx(\"h4\", {\n    \"id\": \"changes--1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changes \\uD83D\\uDD27\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We've unified the usage of all icon props to only accept a React element.\\nUpdate all icon names used in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"leftIcon\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rightIcon\"), \" to the equivalent icon\\nReact element.\"), mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Replacement logic: If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"leftIcon\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"email\"), \", then replace it with\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<EmailIcon/>\"), \" from Chakra.\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"import { PhoneIcon } from \\\"@chakra-ui/core\\\"\\n\\n- <Button leftIcon=\\\"phone\\\">Call</Button>\\n+ <Button leftIcon={<PhoneIcon />}>Call</Button>\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"This reduces the effort needed to use custom icons, eliminates TypeScript\\nerrors, and reduces unused icons bloating your app.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Renamed \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"variantColor\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"colorScheme\"))), mdx(\"h4\", {\n    \"id\": \"features-Ô∏è-2\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Features \\u26A1\\uFE0F\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added support for custom spinners using the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"spinner\"), \" prop\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"import { BeatLoader } from \\\"react-spinners\\\"\\n\\nfunction Example() {\\n  return (\\n    <Button isLoading colorScheme=\\\"blue\\\" spinner={<BeatLoader color=\\\"white\\\" />}>\\n      Click me\\n    </Button>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"checkbox\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Checkbox\"), mdx(\"h4\", {\n    \"id\": \"changes--2\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changes \\uD83D\\uDD27\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"variantColor\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"colorScheme\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"- <Checkbox variantColor=\\\"blue\\\">Option</Checkbox>\\n+ <Checkbox colorScheme=\\\"blue\\\">Option</Checkbox>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Deprecated the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isFullWidth\"), \" prop. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Checkbox\"), \" now takes up the width of the\\nparent by default.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To allow for better checkbox group layout, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CheckboxGroup\"), \" component no\\nlonger supports every style prop. You can now only pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \", and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colorScheme\"), \" in addition to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CheckboxGroup\"), \"-specific props (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultValue\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \").\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"// before\\n<CheckboxGroup isInline spacing=\\\"40px\\\" defaultValue={[\\\"one\\\", \\\"two\\\"]}>\\n  <Checkbox value=\\\"one\\\">One</Checkbox>\\n  <Checkbox value=\\\"two\\\">Two</Checkbox>\\n  <Checkbox value=\\\"three\\\">Three</Checkbox>\\n</CheckboxGroup>\\n\\n// after\\n<CheckboxGroup defaultValue={[\\\"one\\\", \\\"two\\\"]}>\\n  <Stack spacing=\\\"40px\\\">\\n    <Checkbox value=\\\"one\\\">One</Checkbox>\\n    <Checkbox value=\\\"two\\\">Two</Checkbox>\\n    <Checkbox value=\\\"three\\\">Three</Checkbox>\\n  </Stack>\\n</CheckboxGroup>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"We believe a checkbox group's layout should be managed by your design\\nrequirements. The checkboxes can be grouped using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Stack\"), \", placed in a grid\\nusing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SimpleGrid\"), \" or made to wrap automatically using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Wrap\"), \".\")), mdx(\"h4\", {\n    \"id\": \"features-Ô∏è-3\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Features \\u26A1\\uFE0F\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"iconColor\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"iconSize\"), \" props to customize the default check icon\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"<Checkbox iconColor=\\\"blue\\\" iconSize=\\\"1rem\\\">\\n  Option\\n</Checkbox>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"spacing\"), \" prop to customize the spacing between the checkbox and\\nlabel text\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"<Checkbox spacing=\\\"1rem\\\">Option</Checkbox>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useCheckbox\"), \" hook is exported with state and focus management logic for\\nuse in creating tailor-made checkbox component for your application\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useCheckboxGroup\"), \" hook is exported with state management logic for use in\\ncreating tailor-made checkbox group component for your application\"))), mdx(\"h3\", {\n    \"id\": \"colormode\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"ColorMode\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You can now set the initial color mode you want your application to start\\nwith. Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.config.initialColorMode\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"light\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dark\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"const theme = {\\n  config: {\\n    initialColorMode: \\\"dark\\\",\\n  },\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You can now update the color mode based on your user's device preference. Set\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.config.useSystemColorMode\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"const theme = {\\n  config: {\\n    useSystemColorMode: true,\\n  },\\n}\\n\")))), mdx(\"h4\", {\n    \"id\": \"bug-fix-\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Bug Fix \\uD83D\\uDE91\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Color mode now persists correctly when you refresh the page. All you need to\\ndo is add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InitialColorMode\"), \" script as the first child of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"body\"), \".\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Here's how to add it for Next.js:\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"// pages/_app.js\\nimport { InitialColorMode } from \\\"@chakra-ui/core\\\"\\n\\nexport default class Document extends NextDocument {\\n  static async getInitialProps(ctx) {\\n    const initialProps = await NextDocument.getInitialProps(ctx)\\n    return { ...initialProps }\\n  }\\n\\n  render() {\\n    return (\\n      <Html>\\n        <Head />\\n        <body>\\n          {/* \\uD83D\\uDC47 Here's the script */}\\n          <InitializeColorMode />\\n          <Main />\\n          <NextScript />\\n        </body>\\n      </Html>\\n    )\\n  }\\n}\\n\")), mdx(\"p\", null, \"Here's how to add it for Gatsby:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"// gatsby-ssr.js\\nexport const onRenderBody = ({ setPreBodyComponents }) => {\\n  setPreBodyComponents([<InitializeColorMode key=\\\"chakra-ui-no-flash\\\" />])\\n}\\n\")), mdx(\"p\", null, \"We also publish the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/gatsby-plugin-chakra-ui\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"gatsby-plugin-chakra-ui\")), \"\\npackage which will automatically configure \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InitializeColorMode\"), \" along with\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ChakraProvider\"), \".\"), mdx(\"h3\", {\n    \"id\": \"formcontrol\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"FormControl\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We've improved the accessibility of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FormControl\"), \" component. Here are the\\nchanges:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id\"), \" passed to the form control will be passed to the form input directly\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FormLabel\"), \" will have \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"htmlFor\"), \" that points to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id\"), \" of the form input\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FormErrorMessage\"), \" adds \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-describedby\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-invalid\"), \" pointing to\\nthe form input\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FormHelperText\"), \" adds/extends \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-describedby\"), \" pointing to the form input\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isDisabled\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isRequired\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isReadOnly\"), \" props passed to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FormControl\"), \" will\\ncascade across all related components\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FormLabel\"), \" is now aware of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabled\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"focused\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \" state of the\\nform input. This helps you style the label accordingly using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_disabled\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_focus\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_invalid\"), \" style props.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you render \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FormErrorMessage\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isInvalid\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FormErrorMessage\"), \" won't be visible. The only way to make it visible is by\\npassing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isInvalid\"), \" and setting it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \".\"))), mdx(\"h3\", {\n    \"id\": \"image\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Image\"), mdx(\"h4\", {\n    \"id\": \"bug-fixes-\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Bug Fixes \\uD83D\\uDE91\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Resolved the common SSR issue with Next.js\")), mdx(\"h4\", {\n    \"id\": \"features-Ô∏è-4\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Features \\u26A1\\uFE0F\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Added support for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fit\"), \" prop to specify how to fit an image within its\\ndimension. It uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"object-fit\"), \" property\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Added support for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"align\"), \" prop to specify how to align the image within\\nits dimension. It uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"object-position\"), \" property\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Added support for custom \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fallback\"), \" component\"))), mdx(\"h3\", {\n    \"id\": \"input\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Input\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputAddon\"), \", you no longer need to pass border radius properties\\nto the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Input\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputGroup\"), \" will intelligently detect the addon and apply the\\nnecessary border to the input.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Input now uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"paddingY\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"height\"), \" for its block height.\"))), mdx(\"h3\", {\n    \"id\": \"link\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Link\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Due to accessibility reasons, we've deprecated the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isDisabled\"), \" prop for\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Link\"), \".\")), mdx(\"h3\", {\n    \"id\": \"stack\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Stack\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To reduce the API surface area, we've deprecated the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isInline\"), \" and\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isReversed\"), \" props in favor of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"direction\"), \" prop\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"- <Stack isInline>\\n+ <Stack direction=\\\"row\\\">\\n    <Box />\\n    <Box />\\n  </Stack>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We've deprecated the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shouldWrapChildren\"), \" prop because we now use css to\\nmanage the stack rather than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.cloneElement\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Added support for responsive \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"direction\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spacing\"), \" props\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"<Stack direction={[\\\"column\\\", \\\"row\\\"]}>\\n  <Box />\\n  <Box />\\n</Stack>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added support for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"divider\"), \" prop between stacked element. Dividers also work\\nwith responsive direction and spacing.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"<Stack divider={<StackDivider />}>\\n  <Box />\\n  <Box />\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"menu\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Menu\"), mdx(\"h4\", {\n    \"id\": \"features-Ô∏è-5\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Features \\u26A1\\uFE0F\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added support for nested menus or submenus\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"const PreferencesMenu = forwardRef((props, ref) => {\\n  return (\\n    <Menu>\\n      <MenuButton ref={ref} {...props}>\\n        Preferences\\n      </MenuButton>\\n      <MenuList>\\n        <MenuItem>Settings</MenuItem>\\n        <MenuItem isDisabled>Extensions</MenuItem>\\n        <MenuSeparator />\\n        <MenuItem>Keyboard shortcuts</MenuItem>\\n      </MenuList>\\n    </Menu>\\n  )\\n})\\n\\nfunction Example() {\\n  return (\\n    <Menu>\\n      <MenuButton>Code</MenuButton>\\n      <MenuList>\\n        <MenuItem>About Visual Studio Code</MenuItem>\\n        <MenuItem>Check for Updates...</MenuItem>\\n        <MenuSeparator />\\n        <MenuItem as={PreferencesMenu} />\\n      </MenuList>\\n    </Menu>\\n  )\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added support for menu icons and commands (or hotkeys)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"<Menu>\\n  <MenuButton size=\\\"sm\\\" colorScheme=\\\"teal\\\">\\n    Open menu\\n  </MenuButton>\\n  <MenuList>\\n    <MenuItem command=\\\"\\u2318T\\\">New Tab</MenuItem>\\n    <MenuItem command=\\\"\\u2318N\\\">New Window</MenuItem>\\n    <MenuItem command=\\\"\\u2318\\u21E7N\\\">Open Closed Tab</MenuItem>\\n    <MenuItem command=\\\"\\u2318O\\\">Open File...</MenuItem>\\n  </MenuList>\\n</Menu>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Support for menu transitions and animations\"), mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"It's important to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"css\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sx\"), \" prop for the transitions to work\\nproperly. For some reason, it doesn't work with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"style\"), \" native prop\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"<Menu>\\n  <MenuButton size=\\\"sm\\\" colorScheme=\\\"teal\\\">\\n    Open menu\\n  </MenuButton>\\n  <MenuTransition>\\n    {(styles) => (\\n      <MenuList css={styles}>\\n        <MenuItem command=\\\"\\u2318T\\\">New Tab</MenuItem>\\n        <MenuItem command=\\\"\\u2318N\\\">New Window</MenuItem>\\n        <MenuItem command=\\\"\\u2318\\u21E7N\\\">Open Closed Tab</MenuItem>\\n        <MenuItem command=\\\"\\u2318O\\\">Open File...</MenuItem>\\n      </MenuList>\\n    )}\\n  </MenuTransition>\\n</Menu>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added support for Portals. Wrap the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MenuList\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Portal\"), \" component and\\nyou're good to go!\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"<Menu>\\n  <MenuButton size=\\\"sm\\\" colorScheme=\\\"teal\\\">\\n    Open menu\\n  </MenuButton>\\n  <Portal>\\n    <MenuList>\\n      <MenuItem>Menu 1</MenuItem>\\n      <MenuItem>New Window</MenuItem>\\n      <MenuItem>Open Closed Tab</MenuItem>\\n      <MenuItem>Open File</MenuItem>\\n    </MenuList>\\n  </Portal>\\n</Menu>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Moved to Popper V2 \\uD83E\\uDD73\")), mdx(\"h3\", {\n    \"id\": \"fixes-\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Fixes \\uD83D\\uDE91\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fixed issue with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"as\"), \" prop for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MenuItem\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fixed issue with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Link\"), \" not navigating to the specified \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"href\"), \" value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fixed issue where menu popper gets cut off when component is far right\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fixed issue where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Menu\"), \" throws if no \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MenuItem\"), \" exist\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fixed issue where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"closeOnSelect\"), \" doesn't work on navigation when using\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MenuItem\"), \" as link\")), mdx(\"h3\", {\n    \"id\": \"modal\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Modal\"), mdx(\"h4\", {\n    \"id\": \"changes--3\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changes \\uD83D\\uDD27\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Removed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addAriaLabels\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"formatIds\"), \" props in favor of passing a top-level\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" prop to the modal, and we'll handle the rest.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Removed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"preserveScrollBarGap\"), \" prop. We preserve scroll bar gap by default to\\nprevent any layout shift.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Wrap \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalContent\"), \" with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalOverlay\"), \" component.\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"// before\\n<Modal>\\n-  <ModalOverlay />\\n  <ModalContent>\\n    <ModalHeader>Modal header</ModalHeader>\\n    <ModalCloseButton />\\n    <ModalBody>Modal body</ModalBody>\\n    <ModalFooter>Modal footer</ModalFooter>\\n  </ModalContent>\\n</Modal>\\n\\n// after\\n<Modal>\\n+  <ModalOverlay>\\n    <ModalContent>\\n      <ModalHeader>Modal header</ModalHeader>\\n      <ModalCloseButton />\\n      <ModalBody>Modal body</ModalBody>\\n      <ModalFooter>Modal footer</ModalFooter>\\n    </ModalContent>\\n+  </ModalOverlay>\\n</Modal>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Only pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" values defined in the components theme. Hard-coded values\\nwill be ignored. Update the styles in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.components.Modal\"), \" to reflect your\\ncustom values\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You can now disable focus trap by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shouldTrapFocus={false}\")))), mdx(\"h4\", {\n    \"id\": \"props-changes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props Changes\"), mdx(\"p\", null, \"We updated the prop names for boolean props to match our naming convention. All\\nboolean prop must start with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"should\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"is\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"has\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Old Prop\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"New Prop\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"returnFocusOnClose\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"shouldReturnFocus\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"closeOnOverlayClick\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"shouldCloseOnOverlayClick\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"blockScrollOnMount\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"shouldBlockScroll\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"closeOnEsc\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"shouldCloseOnEsc\"))))), mdx(\"h4\", {\n    \"id\": \"new-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"New Props\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"shouldTrapFocus\"), \": to disable focus trap\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"shouldAutoFocus\"), \": to disable autofocus on the first interactive element\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onOverlayClick\"), \": callback fired when the overlay is clicked\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onEsc\"), \": callback fired when \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"esc\"), \" is pressed\")), mdx(\"h3\", {\n    \"id\": \"numberinput\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"NumberInput\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Added example where consumers can format and parse number input values (\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/chakra-ui/chakra-ui/pull/438\"\n  }), \"#438\"), \")\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Fixed issue where error is thrown if the input value is greater than the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max\"), \"\\nprop when focus is blurred (\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/chakra-ui/chakra-ui/pull/584\"\n  }), \"#584\"), \")\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Fixed issue where deleting sole digit sets value to 0 (which may be invalid) (\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/chakra-ui/chakra-ui/pull/533\"\n  }), \"#533\"), \")\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Fixed issue where input returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NaN\"), \" value after multiple dots (\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/chakra-ui/chakra-ui/pull/364\"\n  }), \"#364\"), \")\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Fixed issue where passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NumberInput\"), \" and adding a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" with\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"htmlFor\"), \" that points to that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" doesn't focus the input (\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/chakra-ui/chakra-ui/pull/515\"\n  }), \"#515\"), \")\"))), mdx(\"h3\", {\n    \"id\": \"progress\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Progress\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"color\"), \" prop to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"colorScheme\"), \".\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"- <Progress color=\\\"blue\\\"/>\\n+ <Progress colorScheme=\\\"blue\\\"/>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added Support for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isIndeterminate\"), \" prop in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Progress\"), \" component\")), mdx(\"h3\", {\n    \"id\": \"circularprogress\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CircularProgress\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"trackColor\"), \" prop now takes a specific theme color or a valid \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"css\"), \" color.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"thickness\"), \" prop to point to an actual thickness value in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"px\"), \"\\n(e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"thickness={4}\"), \")\")), mdx(\"h3\", {\n    \"id\": \"radio\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Radio\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"variantColor\"), \" prop to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"colorScheme\"), \".\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"- <Radio variantColor=\\\"blue\\\">Option</Radio>\\n+ <Radio colorScheme=\\\"blue\\\">Option</Radio>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Deprecated the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isFullWidth\"), \" prop. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Radio\"), \" takes up the width of the\\nparent by default.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Deprecated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RadioButton\"), \" component. Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useRadio\"), \" hook to create custom\\nradio buttons.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useRadio\"), \" hook is exported with state and focus management logic for use\\nin creating tailor-made radio component for your application\"))), mdx(\"h3\", {\n    \"id\": \"radiogroup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"RadioGroup\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Deprecated the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isFullWidth\"), \" prop. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RadioGroup\"), \" takes up the width of the\\nparent by default.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To allow for better Radio group layout, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RadioGroup\"), \" component no longer\\nsupports every style prop. You can only pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \", and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colorScheme\"), \" in addition to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RadioGroup\"), \" props (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultValue\"), \", and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \").\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"// before\\n<RadioGroup isInline defaultValue=\\\"one\\\">\\n  <Radio value=\\\"one\\\">One</Radio>\\n  <Radio value=\\\"two\\\">Two</Radio>\\n  <Radio value=\\\"three\\\">Three</Radio>\\n</RadioGroup>\\n\\n// after\\n<RadioGroup defaultValue=\\\"one\\\">\\n  <Stack direction=\\\"row\\\">\\n    <Radio value=\\\"one\\\">One</Radio>\\n    <Radio value=\\\"two\\\">Two</Radio>\\n    <Radio value=\\\"three\\\">Three</Radio>\\n  </Stack>\\n</RadioGroup>\\n\")), mdx(\"h2\", {\n    \"id\": \"slider\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Slider\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Update JSX structure: Wrap \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SliderFilledTrack\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SliderTrack\"), \".\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"// before\\n<Slider defaultValue={30}>\\n-  <SliderTrack />\\n-  <SliderFilledTrack />\\n  <SliderThumb />\\n</Slider>\\n\\n// after\\n<Slider defaultValue={30}>\\n+  <SliderTrack>\\n+    <SliderFilledTrack />\\n+  </SliderTrack>\\n  <SliderThumb />\\n</Slider>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Added support for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isReversed\"), \" prop, which allows users to reverse the\\ndirection and functionality of the slider. This is mostly useful for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rtl\"), \"\\npurposes.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Added support for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChangeEnd\"), \" prop. Dragging the slider can trigger lots\\nof updates and user might only be interested in the final result after sliding\\nis complete.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Added \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isReadOnly\"), \" prop to support cases where slider needs to be in read-only\\nstate.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Export the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useSlider\"), \" hook to help users manage and build custom slider UIs.\"))), mdx(\"h3\", {\n    \"id\": \"popover\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Popover\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"returnFocusOnClose\"), \" has been changed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"returnFocus\"), \" for conciseness.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"autoFocus\"), \" prop to allow users to control whether the popover should\\nautomatically receive focus when it opens.\"))), mdx(\"h3\", {\n    \"id\": \"stat\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Stat\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We improved the semantic HTML structure of the Stat components to use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dl\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dd\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dt\"), \" tags.\")), mdx(\"h3\", {\n    \"id\": \"switch\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Switch\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rename the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"color\"), \" prop to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"colorScheme\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"-  <Switch color=\\\"blue\\\"/>\\n+  <Switch colorScheme=\\\"blue\\\"/>\\n\")), mdx(\"h3\", {\n    \"id\": \"tabs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Tabs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"variantColor\"), \" prop to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"colorScheme\"))), mdx(\"h3\", {\n    \"id\": \"tags\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Tags\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"variantColor\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"colorScheme\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"- <Tag variantColor=\\\"blue\\\"/>\\n+ <Tag colorScheme=\\\"blue\\\"/>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added support for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isDisabled\"), \" prop on the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TagCloseButton\"), \" component\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"<Tag variant=\\\"solid\\\" size=\\\"sm\\\" colorScheme=\\\"cyan\\\">\\n  <TagLabel>Tab Label</TagLabel>\\n  <TagCloseButton isDisabled />\\n</Tag>\\n\")), mdx(\"h3\", {\n    \"id\": \"toast\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Toast\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Removed \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"react-spring\"), \" dependency in favor of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"react-transition-group\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added support for duplicate toast prevention using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"toast.isActive\"), \" method\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added support to programmatically close one or all toasts using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"toast.close\"), \"\\nor \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"toast.closeAll\"), \" methods\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added support to programmatically update a toast using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"toast.update\"), \" method.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added support for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onCloseComplete\"), \" prop, a callback function to run side\\neffects after the toast component has closed.\")), mdx(\"h3\", {\n    \"id\": \"tooltip\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Tooltip\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added support for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hideOnClick\"), \" prop\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Added support for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hideOnMouseDown\"), \" prop\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"That's it! Welcome to Chakra UI v1.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If you still experience issues after migrating, feel free to create an issue\\nor join our Discord chat here: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://discord.gg/dQHfcWF\"\n  }), \"https://discord.gg/dQHfcWF\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Upgrade to v1","description":"A simple guide to upgrade your existing Chakra UI projects to v1.0"},"tableOfContents":{"items":[{"url":"#upgrading-from-v0x-to-v10","title":"Upgrading from v0.x to v1.0","items":[{"url":"#Ô∏è-highlights","title":"‚ö°Ô∏è Highlights"},{"url":"#upgrade-steps","title":"Upgrade steps","items":[{"url":"#1-update-your-dependencies","title":"1. Update your dependencies"},{"url":"#2-clone-chakras-default-theme","title":"2. Clone Chakra's default theme"},{"url":"#3-update-the-themeprovider","title":"3. Update the ThemeProvider"},{"url":"#4-rename-variantcolor-to-colorscheme","title":"4. Rename variantColor to colorScheme"},{"url":"#5-update-layout-size-prop","title":"5. Update layout size prop"},{"url":"#5-update-these-prop-names","title":"5. Update these prop names"}]},{"url":"#component-updates","title":"Component Updates","items":[{"url":"#accordion","title":"Accordion","items":[{"url":"#changes-","title":"Changes üîß"},{"url":"#features-Ô∏è","title":"Features ‚ö°Ô∏è"}]},{"url":"#aspectratiobox","title":"AspectRatioBox"},{"url":"#avatar","title":"Avatar","items":[{"url":"#features-Ô∏è-1","title":"Features ‚ö°Ô∏è"}]},{"url":"#breadcrumb","title":"Breadcrumb"},{"url":"#button","title":"Button","items":[{"url":"#changes--1","title":"Changes üîß"},{"url":"#features-Ô∏è-2","title":"Features ‚ö°Ô∏è"}]},{"url":"#checkbox","title":"Checkbox","items":[{"url":"#changes--2","title":"Changes üîß"},{"url":"#features-Ô∏è-3","title":"Features ‚ö°Ô∏è"}]},{"url":"#colormode","title":"ColorMode","items":[{"url":"#bug-fix-","title":"Bug Fix üöë"}]},{"url":"#formcontrol","title":"FormControl"},{"url":"#image","title":"Image","items":[{"url":"#bug-fixes-","title":"Bug Fixes üöë"},{"url":"#features-Ô∏è-4","title":"Features ‚ö°Ô∏è"}]},{"url":"#input","title":"Input"},{"url":"#link","title":"Link"},{"url":"#stack","title":"Stack"},{"url":"#menu","title":"Menu","items":[{"url":"#features-Ô∏è-5","title":"Features ‚ö°Ô∏è"}]},{"url":"#fixes-","title":"Fixes üöë"},{"url":"#modal","title":"Modal","items":[{"url":"#changes--3","title":"Changes üîß"},{"url":"#props-changes","title":"Props Changes"},{"url":"#new-props","title":"New Props"}]},{"url":"#numberinput","title":"NumberInput"},{"url":"#progress","title":"Progress"},{"url":"#circularprogress","title":"CircularProgress"},{"url":"#radio","title":"Radio"},{"url":"#radiogroup","title":"RadioGroup"}]},{"url":"#slider","title":"Slider","items":[{"url":"#popover","title":"Popover"},{"url":"#stat","title":"Stat"},{"url":"#switch","title":"Switch"},{"url":"#tabs","title":"Tabs"},{"url":"#tags","title":"Tags"},{"url":"#toast","title":"Toast"},{"url":"#tooltip","title":"Tooltip"}]}]}]}}},"pageContext":{"slug":"/docs/migration","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/contributing.mdx","frontmatter":{"title":"Contributing","order":9},"fields":{"collection":"docs","slug":"/docs/contributing"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/accordion.mdx","frontmatter":{"title":"Accordion","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/accordion"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/docs/migration.mdx"}}}