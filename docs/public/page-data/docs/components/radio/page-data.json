{"componentChunkName":"component---src-templates-docs-js","path":"/docs/components/radio","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Radio\",\n  \"package\": \"@chakra-ui/radio\",\n  \"image\": \"components/radio.svg\",\n  \"description\": \"Radios are used when only one choice may be selected in a series of options.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"radio\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Radio\"), mdx(\"p\", null, \"Radios are used when only one choice may be selected in a series of options.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/radio\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"p\", null, \"Native HTML radios are 100% accessible by default, so we used a\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dev.to/lkopacz/create-custom-keyboard-accessible-radio-buttons-22eh\"\n  }), \"very common CSS technique\"), \"\\nto style the radio.\"), mdx(\"p\", null, \"The Radio component composes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ControlBox\"), \", a component we created to make it\\neasy to style sibling inputs. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/controlbox\"\n  }), \"Check it out\")), mdx(\"h2\", {\n    \"id\": \"installation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Installation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Radio, RadioGroup } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h3\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function RadioExample() {\\n  const [value, setValue] = React.useState(\\\"1\\\")\\n  return (\\n    <RadioGroup onChange={setValue} value={value}>\\n      <Stack direction=\\\"row\\\">\\n        <Radio value=\\\"1\\\">First</Radio>\\n        <Radio value=\\\"2\\\">Second</Radio>\\n        <Radio value=\\\"3\\\">Third</Radio>\\n      </Stack>\\n    </RadioGroup>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"radio-with-custom-color\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Radio with custom color\"), mdx(\"p\", null, \"You can override the color scheme of the Radio to any color key specified in\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.colors\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<RadioGroup defaultValue=\\\"2\\\">\\n  <Stack spacing={5} direction=\\\"row\\\">\\n    <Radio colorScheme=\\\"red\\\" value=\\\"1\\\">\\n      Radio\\n    </Radio>\\n    <Radio colorScheme=\\\"green\\\" value=\\\"2\\\">\\n      Radio\\n    </Radio>\\n  </Stack>\\n</RadioGroup>\\n\")), mdx(\"h3\", {\n    \"id\": \"radio-sizes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Radio sizes\"), mdx(\"p\", null, \"The checkbox comes with 3 sizes\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack>\\n  <Radio size=\\\"sm\\\" name=\\\"1\\\" colorScheme=\\\"red\\\">\\n    Radio\\n  </Radio>\\n  <Radio size=\\\"md\\\" name=\\\"1\\\" colorScheme=\\\"green\\\">\\n    Radio\\n  </Radio>\\n  <Radio size=\\\"lg\\\" name=\\\"1\\\" colorScheme=\\\"orange\\\" defaultChecked>\\n    Radio\\n  </Radio>\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"disabled-radios\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Disabled radios\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<RadioGroup defaultValue=\\\"1\\\">\\n  <Stack>\\n    <Radio value=\\\"1\\\" isDisabled>\\n      Checked\\n    </Radio>\\n    <Radio value=\\\"2\\\">Unchecked</Radio>\\n    <Radio value=\\\"3\\\">Unchecked</Radio>\\n  </Stack>\\n</RadioGroup>\\n\")), mdx(\"h3\", {\n    \"id\": \"horizontal-alignment\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Horizontal alignment\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<RadioGroup defaultValue=\\\"1\\\">\\n  <Stack spacing={4} direction=\\\"row\\\">\\n    <Radio value=\\\"1\\\" isDisabled>\\n      Radio 1\\n    </Radio>\\n    <Radio value=\\\"2\\\">Radio 2</Radio>\\n    <Radio value=\\\"3\\\">Radio 3</Radio>\\n  </Stack>\\n</RadioGroup>\\n\")), mdx(\"h3\", {\n    \"id\": \"invalid-checkbox\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Invalid Checkbox\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Radio isInvalid>Radio</Radio>\\n\")), mdx(\"h3\", {\n    \"id\": \"custom-radio-buttons\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Custom Radio Buttons\"), mdx(\"p\", null, \"In some cases, you might need to create components that work like radios but\\ndon't look like radios. Chakra exports a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RadioButtonGroup\"), \" to help with this\\nscenario. Here's what you need to do:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a component that accepts the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isChecked\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isDisabled\"), \" props. Be\\nsure to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"forwardRef\"), \" to the component because it's used for keyboard\\naccessibility.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add the component as children of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"RadioButtonGroup\"), \" and pass a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \" prop\\nto it.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If you pass \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isDisabled\"), \" to any of it's children, it'll be skipped in the\\nkeyboard navigation.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"manual=true\",\n    \"manual\": \"true\"\n  }), \"// Step 1: Create a component that accepts `isChecked` and `isDisabled` prop\\nconst CustomRadio = React.forwardRef((props, ref) => {\\n  const { isChecked, isDisabled, value, ...rest } = props\\n  return (\\n    <Button\\n      ref={ref}\\n      colorScheme={isChecked ? \\\"red\\\" : \\\"gray\\\"}\\n      aria-checked={isChecked}\\n      role=\\\"radio\\\"\\n      isDisabled={isDisabled}\\n      {...rest}\\n    />\\n  )\\n})\\n\\n// Step 2: Add `CustomRadio` as children of `RadioButtonGroup`\\nfunction Example() {\\n  return (\\n    <RadioButtonGroup\\n      defaultValue=\\\"rad2\\\"\\n      onChange={(val) => console.log(val)}\\n      isInline\\n    >\\n      <CustomRadio value=\\\"rad1\\\">CustomRadio 1</CustomRadio>\\n      <CustomRadio value=\\\"rad2\\\">CustomRadio 2</CustomRadio>\\n      <CustomRadio value=\\\"rad3\\\">CustomRadio 3</CustomRadio>\\n      {/* This child will be skipped in keyboard navigation */}\\n      <CustomRadio isDisabled value=\\\"rad4\\\">\\n        CustomRadio 4\\n      </CustomRadio>\\n    </RadioButtonGroup>\\n  )\\n}\\n\\nrender(<Example />)\\n\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"id\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The id assigned to input field\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"name\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The name of the input field in a radio (Useful for form submission)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"value\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The value to be used in the radio input. This is the value that will be returned on form submission\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"colorScheme\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The color of the radio when it's checked. This should be one of the color keys in the theme (e.g.\\\"green\\\", \\\"red\\\")\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"defaultIsChecked\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the radio will be initially checked\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isChecked\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the radio will be checked. You'll need to pass \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onChange\"), \" to update it's value (since it's now controlled)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isFullWidth\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the radio should take up the full width of the parent\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"size\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lg\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The size (width and height) of the radio\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isDisabled\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the radio will be disabled\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isInvalid\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the radio is marked as invalid. Changes style of unchecked state\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"children\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The children of the radio\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onChange\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"function\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Function called when the state of the radio changes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onBlur\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"function\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Function called when you blur out of the radio\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onFocus\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"function\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Function called when the radio receive focus\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"aria-label\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"An accessible label for the radio in event there's no visible label or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\"), \" was passed\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"aria-labelledby\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Id that points to the label for the radio in event no \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\"), \" was passed\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Radio","description":"Radios are used when only one choice may be selected in a series of options."},"tableOfContents":{"items":[{"url":"#radio","title":"Radio","items":[{"url":"#installation","title":"Installation","items":[{"url":"#usage","title":"Usage"},{"url":"#radio-with-custom-color","title":"Radio with custom color"},{"url":"#radio-sizes","title":"Radio sizes"},{"url":"#disabled-radios","title":"Disabled radios"},{"url":"#horizontal-alignment","title":"Horizontal alignment"},{"url":"#invalid-checkbox","title":"Invalid Checkbox"},{"url":"#custom-radio-buttons","title":"Custom Radio Buttons"}]},{"url":"#props","title":"Props"}]}]}}},"pageContext":{"slug":"/docs/components/radio","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/progress.mdx","frontmatter":{"title":"Progress","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/progress"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/select.mdx","frontmatter":{"title":"Select","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/select"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/docs/components/radio.mdx"}}}