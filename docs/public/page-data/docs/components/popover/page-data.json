{"componentChunkName":"component---src-templates-docs-js","path":"/docs/components/popover","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Popover\",\n  \"package\": \"@chakra-ui/popover\",\n  \"image\": \"components/popover.svg\",\n  \"description\": \"Popover is a non-modal dialog that floats around a trigger\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"popover\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Popover\"), mdx(\"p\", null, \"Popover is a non-modal dialog that floats around a trigger. It's used to display\\ncontextual information to the user, and should be paired with a clickable\\ntrigger element.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/popover\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"p\", null, \"Popover is built on top of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://popper.js.org/\"\n  }), \"Popper.js\"), \" library, and\\ncomposes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Popper\"), \" component.\"), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Popover\"), \": The wrapper that provides props, state, and context to its\\nchildren.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverTrigger\"), \": Used to wrap the reference (or trigger) element.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverContent\"), \": The popover itself.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverHeader\"), \": The header of the popover.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverBody\"), \": The body of the popover.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverArrow\"), \": A visual arrow that points to the reference (or trigger).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverCloseButton\"), \": A button to close the popover.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {\\n  Popover,\\n  PopoverTrigger,\\n  PopoverContent,\\n  PopoverHeader,\\n  PopoverBody,\\n  PopoverFooter,\\n  PopoverArrow,\\n  PopoverCloseButton,\\n} from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"basic-usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Basic Usage\"), mdx(\"p\", null, \"When using this component, ensure the children passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PopoverTrigger\"), \" is\\nfocusable. Users can tab to it using their keyboard, and it can take a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ref\"), \".\\nIt's critical for accessiblity.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"A11y:\"), \" When Popover opens, focus is sent to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PopoverContent\"), \". When it\\ncloses, focus is returned to the trigger.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Popover>\\n  <PopoverTrigger>\\n    <Button>Trigger</Button>\\n  </PopoverTrigger>\\n  <PopoverContent>\\n    <PopoverArrow />\\n    <PopoverCloseButton />\\n    <PopoverHeader>Confirmation!</PopoverHeader>\\n    <PopoverBody>Are you sure you want to have that milkshake?</PopoverBody>\\n  </PopoverContent>\\n</Popover>\\n\")), mdx(\"h2\", {\n    \"id\": \"rendering-the-popover-in-a-portal\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Rendering the Popover in a Portal\"), mdx(\"p\", null, \"By default, the Popover doesn't render in a Portal. To make them display in a\\nportal, wrap the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PopoverContent\"), \" in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Portal\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"You might need to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Inspect Element\"), \" to see this in action. Notice that\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PopoverContent\"), \" is rendered as a child of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<body>\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Popover>\\n  <PopoverTrigger>\\n    <Button>Trigger</Button>\\n  </PopoverTrigger>\\n  <Portal>\\n    <PopoverContent>\\n      <PopoverArrow />\\n      <PopoverHeader>Header</PopoverHeader>\\n      <PopoverCloseButton />\\n      <PopoverBody>\\n        <Button colorScheme=\\\"blue\\\">Button</Button>\\n      </PopoverBody>\\n      <PopoverFooter>This is the footer</PopoverFooter>\\n    </PopoverContent>\\n  </Portal>\\n</Popover>\\n\")), mdx(\"h2\", {\n    \"id\": \"focus-an-element-when-popover-opens\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Focus an element when Popover opens\"), mdx(\"p\", null, \"By default, focus is to sent to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PopoverContent\"), \" when it opens. Pass the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialFocusRef\"), \" prop to send focus to a specific element instead.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function WalkthroughPopover() {\\n  const initialFocusRef = React.useRef()\\n  return (\\n    <Popover\\n      initialFocusRef={initialFocusRef}\\n      placement=\\\"bottom\\\"\\n      closeOnBlur={false}\\n    >\\n      <PopoverTrigger>\\n        <Button>Trigger</Button>\\n      </PopoverTrigger>\\n      <PopoverContent color=\\\"white\\\" bg=\\\"blue.800\\\" borderColor=\\\"blue.800\\\">\\n        <PopoverHeader pt={4} fontWeight=\\\"bold\\\" border=\\\"0\\\">\\n          Manage Your Channels\\n        </PopoverHeader>\\n        <PopoverArrow />\\n        <PopoverCloseButton />\\n        <PopoverBody>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore.\\n        </PopoverBody>\\n        <PopoverFooter\\n          border=\\\"0\\\"\\n          d=\\\"flex\\\"\\n          alignItems=\\\"center\\\"\\n          justifyContent=\\\"space-between\\\"\\n          pb={4}\\n        >\\n          <Box fontSize=\\\"sm\\\">Step 2 of 4</Box>\\n          <ButtonGroup size=\\\"sm\\\">\\n            <Button colorScheme=\\\"green\\\">Setup Email</Button>\\n            <Button colorScheme=\\\"blue\\\" ref={initialFocusRef}>\\n              Next\\n            </Button>\\n          </ButtonGroup>\\n        </PopoverFooter>\\n      </PopoverContent>\\n    </Popover>\\n  )\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"trapping-focus-within-popover\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Trapping Focus within Popover\"), mdx(\"p\", null, \"If the popover contains a form, you might need to trap focus within the popover\\nand close it when the user fills the form and hits \\\"save\\\".\"), mdx(\"p\", null, \"You can leverage\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/theKashey/react-focus-lock\"\n  }), \"react-focus-lock\"), \" to trap focus\\nwithin the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PopoverContent\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"manual=true\",\n    \"manual\": \"true\"\n  }), \"// import  FocusLock from \\\"react-focus-lock\\\"\\n\\n// 1. Create a text input component\\nconst TextInput = React.forwardRef((props, ref) => {\\n  return (\\n    <FormControl>\\n      <FormLabel htmlFor={props.id}>{props.label}</FormLabel>\\n      <Input ref={ref} id={props.id} {...props} />\\n    </FormControl>\\n  )\\n})\\n\\n// 2. Create the form\\nconst Form = ({ firstFieldRef, onCancel }) => {\\n  return (\\n    <Stack spacing={4}>\\n      <TextInput\\n        label=\\\"First name\\\"\\n        id=\\\"first-name\\\"\\n        ref={firstFieldRef}\\n        defaultValue=\\\"John\\\"\\n      />\\n      <TextInput label=\\\"Last name\\\" id=\\\"last-name\\\" defaultValue=\\\"Smith\\\" />\\n      <ButtonGroup d=\\\"flex\\\" justifyContent=\\\"flex-end\\\">\\n        <Button variant=\\\"outline\\\" onClick={onCancel}>\\n          Cancel\\n        </Button>\\n        <Button isDisabled colorScheme=\\\"teal\\\">\\n          Save\\n        </Button>\\n      </ButtonGroup>\\n    </Stack>\\n  )\\n}\\n\\n// 3. Create the Popover\\n// Ensure you set `closeOnBlur` prop to false so it doesn't close on outside click\\nconst PopoverForm = () => {\\n  const [isOpen, setIsOpen] = React.useState(false)\\n  const firstFieldRef = React.useRef(null)\\n  const open = () => setIsOpen(true)\\n  const close = () => setIsOpen(false)\\n  return (\\n    <>\\n      <Box d=\\\"inline-block\\\" mr={3}>\\n        John Smith\\n      </Box>\\n      <Popover\\n        isOpen={isOpen}\\n        initialFocusRef={firstFieldRef}\\n        onOpen={open}\\n        onClose={close}\\n        placement=\\\"right\\\"\\n        closeOnBlur={false}\\n      >\\n        <PopoverTrigger>\\n          <IconButton size=\\\"sm\\\" icon={<EditIcon />} />\\n        </PopoverTrigger>\\n        <PopoverContent p={5}>\\n          <FocusLock returnFocus persistentFocus={false}>\\n            <PopoverArrow bg=\\\"white\\\" />\\n            <PopoverCloseButton />\\n            <Form firstFieldRef={firstFieldRef} onCancel={close} />\\n          </FocusLock>\\n        </PopoverContent>\\n      </Popover>\\n    </>\\n  )\\n}\\n\\nrender(<PopoverForm />)\\n\")), mdx(\"h2\", {\n    \"id\": \"controlled-usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Controlled Usage\"), mdx(\"p\", null, \"You can control the opening and closing of the popover by passing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \",\\nand \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClose\"), \" props.\"), mdx(\"p\", null, \"Sometimes you might need to set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"returnFocusOnClose\"), \" prop to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" to\\nprevent popver from returning focus to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PopoverTrigger\"), \"'s children.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function ControlledUsage() {\\n  const [isOpen, setIsOpen] = React.useState(false)\\n  const open = () => setIsOpen(!isOpen)\\n  const close = () => setIsOpen(false)\\n  return (\\n    <>\\n      <Button mr={5} onClick={open}>\\n        Trigger\\n      </Button>\\n      <Popover\\n        returnFocusOnClose={false}\\n        isOpen={isOpen}\\n        onClose={close}\\n        placement=\\\"right\\\"\\n        closeOnBlur={false}\\n      >\\n        <PopoverTrigger>\\n          <Button colorScheme=\\\"pink\\\">Popover Target</Button>\\n        </PopoverTrigger>\\n        <PopoverContent>\\n          <PopoverHeader fontWeight=\\\"semibold\\\">Confirmation</PopoverHeader>\\n          <PopoverArrow />\\n          <PopoverCloseButton />\\n          <PopoverBody>\\n            Are you sure you want to continue with your action?\\n          </PopoverBody>\\n          <PopoverFooter d=\\\"flex\\\" justifyContent=\\\"flex-end\\\">\\n            <ButtonGroup size=\\\"sm\\\">\\n              <Button variant=\\\"outline\\\">Cancel</Button>\\n              <Button colorScheme=\\\"red\\\">Apply</Button>\\n            </ButtonGroup>\\n          </PopoverFooter>\\n        </PopoverContent>\\n      </Popover>\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"accessing-internal-state\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accessing Internal state\"), mdx(\"p\", null, \"Chakra provides access to two internal details: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClose\"), \". Use the\\nrender prop pattern to gain access to them.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function InternalStateEx() {\\n  const initRef = React.useRef()\\n  return (\\n    <Popover closeOnBlur={false} placement=\\\"left\\\" initialFocusRef={initRef}>\\n      {({ isOpen, onClose }) => (\\n        <>\\n          <PopoverTrigger>\\n            <Button>Click to {isOpen ? \\\"close\\\" : \\\"open\\\"}</Button>\\n          </PopoverTrigger>\\n          <Portal>\\n            <PopoverContent>\\n              <PopoverHeader>This is the header</PopoverHeader>\\n              <PopoverCloseButton />\\n              <PopoverBody>\\n                <Box>\\n                  Hello. Nice to meet you! This is the body of the popover\\n                </Box>\\n                <Button\\n                  mt={4}\\n                  colorScheme=\\\"blue\\\"\\n                  onClick={onClose}\\n                  ref={initRef}\\n                >\\n                  Close\\n                </Button>\\n              </PopoverBody>\\n              <PopoverFooter>This is the footer</PopoverFooter>\\n            </PopoverContent>\\n          </Portal>\\n        </>\\n      )}\\n    </Popover>\\n  )\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"customizing-the-popover\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Customizing the Popover\"), mdx(\"p\", null, \"Chakra exports all the components you need to customize the look and feel of the\\npopover. You can change the background, arrow size, box shadow and so on.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Popover>\\n  <PopoverTrigger>\\n    <Box\\n      tabIndex=\\\"0\\\"\\n      role=\\\"button\\\"\\n      aria-label=\\\"Some box\\\"\\n      p={5}\\n      w=\\\"120px\\\"\\n      bg=\\\"gray.300\\\"\\n      children=\\\"Click\\\"\\n    />\\n  </PopoverTrigger>\\n  <PopoverContent bg=\\\"tomato\\\" color=\\\"white\\\">\\n    <PopoverHeader fontWeight=\\\"semibold\\\">Customization</PopoverHeader>\\n    <PopoverArrow bg=\\\"pink.500\\\" />\\n    <PopoverCloseButton bg=\\\"purple.500\\\" />\\n    <PopoverBody>\\n      Tadaa!! The arrow color and background color is customized. Check the\\n      props for each component.\\n    </PopoverBody>\\n  </PopoverContent>\\n</Popover>\\n\")), mdx(\"h2\", {\n    \"id\": \"popover-placements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Popover Placements\"), mdx(\"p\", null, \"Since popover is powered by PopperJS, you can change the placement of the\\npopover by passing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"placement\"), \" prop. See the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#props\"\n  }), \"props\"), \" for the\\npossible placement values.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Even though you specified the placement, Popover will try to reposition itself\\nin the event that available space at the specified placement isn't enough.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Popover placement=\\\"top-start\\\">\\n  <PopoverTrigger>\\n    <Button>Click me</Button>\\n  </PopoverTrigger>\\n  <PopoverContent>\\n    <PopoverHeader fontWeight=\\\"semibold\\\">Popover placement</PopoverHeader>\\n    <PopoverArrow />\\n    <PopoverCloseButton />\\n    <PopoverBody>\\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n      tempor incididunt ut labore et dolore.\\n    </PopoverBody>\\n  </PopoverContent>\\n</Popover>\\n\")), mdx(\"h2\", {\n    \"id\": \"accessiblity\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accessiblity\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"When you see the word \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"trigger\\\"\"), \", it's referring to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \" of\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PopoverTrigger\"))), mdx(\"h3\", {\n    \"id\": \"keyboard-and-focus\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Keyboard and Focus\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When the popover is opened, focus is moved to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverContent\"), \". If the\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"initialFocusRef\"), \" is set, then focus moves to the element with that \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ref\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When the popover is closed, focus returns to the trigger. If you set\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"returnFocusOnClose\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \", focus will not return.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If trigger is set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hover\"), \":\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Focusing on or mousing over the trigger will open the popover\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blurring or mousing out of the trigger will close the popover. If you move\\nyour mouse into the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverContent\"), \", it'll remain visible.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If trigger is set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"click\"), \":\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clicking the trigger or using the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Space\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Enter\"), \" when focus is on the\\ntrigger will open the popover.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clicking the trigger again will close the popover.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hitting the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Esc\"), \" key while the popover is open and focus is within the\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverContent\"), \", will close the popover. If you set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"closeOnEsc\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \",\\nit will not close.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clicking outside or blurring out of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverContent\"), \" closes the popover.\\nIf you set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"closeOnBlur\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \", it will not close.\")), mdx(\"h3\", {\n    \"id\": \"aria-attributes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"ARIA Attributes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the trigger is set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"click\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverContent\"), \" element has role set to\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dialog\"), \". If the trigger is set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hover\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverContent\"), \" has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"role\"), \"\\nset to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tooltip\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverContent\"), \" has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-labelledby\"), \" set to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id\"), \" of the\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverHeader\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverContent\"), \" has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-describedby\"), \" set to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id\"), \" of the\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverBody\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverContent\"), \" has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-hidden\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \" depending on\\nthe open/closed state of the popover.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The trigger has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-haspopup\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" to denote that it triggers a\\npopover.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The trigger has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-controls\"), \" set to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id\"), \" of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverContent\"), \" to\\nassociate the popover and the trigger.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The trigger has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-expanded\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \" depending on the\\nopen/closed state of the popover.\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"popover-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Popover Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isOpen\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the popover is shown\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"defaultIsOpen\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the popover is shown initially.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"initialFocusRef\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.Ref\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ref\"), \" of the element that should receive focus when the popover opens.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"trigger\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"hover\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"click\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"click\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The interaction that triggers the popover.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"placement\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"PopperJS.placement\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bottom\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The placement of the popover.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"returnFocusOnClose\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the popover will return focus to the trigger when it closes\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"closeOnBlur\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the popover will close when you blur out it by clicking outside or tabbing out\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"closeOnEsc\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", close the popover when the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"esc\"), \" key is pressed\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(props: InternalState) => React.ReactNode\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The children of the popover\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"gutter\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"4\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The gap (in pixels) to apply between the popover and the target. Used by \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"popper.js\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"usePortal\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" the popover is displayed with a \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Portal\"), \". Rendering content inside a Portal allows the popover content to escape the physical bounds of its parent while still being positioned correctly relative to its target\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onOpen\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"() => void\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Callback fired when the popover opens\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onClose\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"() => void\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Callback fired when the popover closes\")))), mdx(\"h3\", {\n    \"id\": \"other-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Other Props\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverContent\"), \" composes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PseudoBox\"), \" and has the ability to smartly position\\nitself. Thanks to popper.js\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverArrow\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverHeader\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverFooter\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverBody\"), \" composes\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Box\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PopoverCloseButton\"), \" composes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PseudoBox\"), \" component.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Popover","description":"Popover is a non-modal dialog that floats around a trigger"},"tableOfContents":{"items":[{"url":"#popover","title":"Popover","items":[{"url":"#import","title":"Import"},{"url":"#basic-usage","title":"Basic Usage"},{"url":"#rendering-the-popover-in-a-portal","title":"Rendering the Popover in a Portal"},{"url":"#focus-an-element-when-popover-opens","title":"Focus an element when Popover opens"},{"url":"#trapping-focus-within-popover","title":"Trapping Focus within Popover"},{"url":"#controlled-usage","title":"Controlled Usage"},{"url":"#accessing-internal-state","title":"Accessing Internal state"},{"url":"#customizing-the-popover","title":"Customizing the Popover"},{"url":"#popover-placements","title":"Popover Placements"},{"url":"#accessiblity","title":"Accessiblity","items":[{"url":"#keyboard-and-focus","title":"Keyboard and Focus"},{"url":"#aria-attributes","title":"ARIA Attributes"}]},{"url":"#props","title":"Props","items":[{"url":"#popover-props","title":"Popover Props"},{"url":"#other-props","title":"Other Props"}]}]}]}}},"pageContext":{"slug":"/docs/components/popover","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/numberinput.mdx","frontmatter":{"title":"Number Input","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/numberinput"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/progress.mdx","frontmatter":{"title":"Progress","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/progress"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/docs/components/popover.mdx"}}}