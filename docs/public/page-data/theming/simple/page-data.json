{"componentChunkName":"component---src-templates-docs-js","path":"/theming/simple","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Basic\",\n  \"description\": \"How to use the theming API in chakra\",\n  \"order\": 2\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"theming-api---basics\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Theming API - Basics\"), mdx(\"h2\", {\n    \"id\": \"design-a-button-component\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Design a button component\"), mdx(\"p\", null, \"Let's take this further and try to create a custom button that has 2 sizes,\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"large\"), \".\"), mdx(\"p\", null, \"First, let's add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"baseStyle\"), \" for common styles like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"font-weight\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"text-transform\"), \", etc.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"const Button = chakra(\\\"button\\\", {\\n  baseStyle: {\\n    fontWeight: \\\"semibold\\\",\\n    borderRadius: \\\"4px\\\",\\n    textTransform: \\\"uppercase\\\",\\n  },\\n})\\n\")), mdx(\"p\", null, \"Next, we'll define the styles for the button sizes. Here's how to do it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"const Button = chakra(\\\"button\\\", {\\n  sizes: {\\n    small: {\\n      padding: \\\"12px\\\",\\n      fontSize: \\\"14px\\\",\\n    },\\n    large: {\\n      padding: \\\"24px\\\",\\n      fontSize: \\\"18px\\\",\\n    },\\n  },\\n})\\n\")), mdx(\"p\", null, \"Now, let's add 2 variant styles to the button, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"solid\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"outline\"), \". Here's how\\nto do it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"const Button = chakra(\\\"button\\\", {\\n  variants: {\\n    solid: {\\n      bg: \\\"blue.600\\\",\\n      color: \\\"white\\\",\\n    },\\n    outline: {\\n      border: \\\"2px\\\",\\n      borderColor: \\\"blue.600\\\",\\n    },\\n  },\\n})\\n\")), mdx(\"p\", null, \"Combining the sizes and variants, We now have a themable Button component.\\nHere's what it looks like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"manual=true\",\n    \"manual\": \"true\"\n  }), \"const Button = chakra(\\\"button\\\", {\\n  baseStyle: {\\n    borderRadius: \\\"md\\\",\\n    fontWeight: \\\"semibold\\\",\\n    textTransform: \\\"uppercase\\\",\\n    transition: \\\"all 0.2s\\\",\\n  },\\n  sizes: {\\n    small: {\\n      padding: \\\"8px\\\",\\n      fontSize: \\\"12px\\\",\\n    },\\n    large: {\\n      padding: \\\"16px\\\",\\n      fontSize: \\\"16px\\\",\\n    },\\n  },\\n  variants: {\\n    solid: {\\n      bg: \\\"blue.600\\\",\\n      color: \\\"white\\\",\\n      _hover: {\\n        bg: \\\"blue.700\\\",\\n      },\\n    },\\n    outline: {\\n      border: \\\"2px\\\",\\n      borderColor: \\\"currentColor\\\",\\n      color: \\\"blue.400\\\",\\n      _hover: {\\n        bg: \\\"blue.50\\\",\\n        color: \\\"blue.600\\\",\\n      },\\n    },\\n  },\\n})\\n\\nrender(\\n  <Button size=\\\"small\\\" variant=\\\"solid\\\">\\n    Welcome\\n  </Button>,\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"setting-default-values\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Setting default values\"), mdx(\"p\", null, \"Most of the time, you want the button component to come with a default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \"\\nand \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \" without having to pass props to it.\"), mdx(\"p\", null, \"To set the default values, you can use React's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultProps\"), \".\"), mdx(\"p\", null, \"Here's how to set the button size to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \" and variant to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"solid\"), \" by default.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"Button.defaultProps = {\\n  size: \\\"small\\\",\\n  variant: \\\"solid\\\",\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"using-the-button-component\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"Button\"), \" component\"), mdx(\"p\", null, \"First, without passing any props to the Button component, it'll read from the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultProps\"), \" in the theme.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"// this will render a small, solid button\\n<Button>Chakra</Button>\\n\")), mdx(\"p\", null, \"Now, you can pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop to modify the button's size\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"// this will render a large, solid button\\n<Button size=\\\"large\\\">Chakra</Button>\\n\")), mdx(\"h3\", {\n    \"id\": \"using-the-themekey\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"themeKey\")), mdx(\"p\", null, \"To provide this styles globally, you can move all these styles to the theme\\nunder \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.components.Button\"), \" and use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"themeKey\"), \" option to automatically\\nconnect them. It works the same!\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uD83D\\uDCA1 Pro Tip:\"), \" You can also move the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultProps\"), \" to the theme as well.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"// 1. Use the `themeKey` option\\nconst Button = chakra(\\\"button\\\", {\\n  themeKey: \\\"Button\\\",\\n})\\n\\n// 2. Add styles to the theme\\nconst theme = {\\n  components: {\\n    Button: {\\n      defaultProps: {\\n        size: \\\"small\\\",\\n        variant: \\\"solid\\\",\\n      },\\n      baseStyle: {\\n        fontWeight: \\\"semibold\\\",\\n        textTransform: \\\"uppercase\\\",\\n      },\\n      sizes: {\\n        small: {\\n          padding: \\\"12px\\\",\\n          fontSize: \\\"14px\\\",\\n        },\\n        large: {\\n          padding: \\\"24px\\\",\\n          fontSize: \\\"18px\\\",\\n        },\\n      },\\n      variants: {\\n        solid: {\\n          bg: \\\"blue.600\\\",\\n          color: \\\"white\\\",\\n        },\\n        outline: {\\n          border: \\\"2px\\\",\\n          borderColor: \\\"blue.600\\\",\\n        },\\n      },\\n    },\\n  },\\n}\\n\")), mdx(\"p\", null, \"This API makes super easy to add or remove button sizes or variants in the\\nfuture.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"All Chakra's component follows this API and we've made call component styles\\navailable to you in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chakra/\"), \" folder of your project.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Basic","description":"How to use the theming API in chakra"},"tableOfContents":{"items":[{"url":"#theming-api---basics","title":"Theming API - Basics","items":[{"url":"#design-a-button-component","title":"Design a button component","items":[{"url":"#setting-default-values","title":"Setting default values"},{"url":"#using-the-button-component","title":"Using the Button component"},{"url":"#using-the-themekey","title":"Using the themeKey"}]}]}]}}},"pageContext":{"slug":"/theming/simple","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/theming/overview.mdx","frontmatter":{"title":"Introduction","order":1},"fields":{"collection":"theming","slug":"/theming/overview"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/theming/advanced.mdx","frontmatter":{"title":"Advanced","order":3},"fields":{"collection":"theming","slug":"/theming/advanced"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/theming/simple.mdx"}}}