{"componentChunkName":"component---src-templates-docs-js","path":"/docs/components/modal","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Modal\",\n  \"package\": \"@chakra-ui/modal\",\n  \"image\": \"components/modal.svg\",\n  \"description\": \"A dialog is a window overlaid on either the primary window or another dialog window\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"modal-dialog\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Modal (Dialog)\"), mdx(\"p\", null, \"A dialog is a window overlaid on either the primary window or another dialog\\nwindow. Content behind a modal dialog is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"inert\"), \", meaning that users cannot\\ninteract with it.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/modal\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uD83D\\uDEA8 Version (v1.0.0) introduced a breaking change to this component's API.\\nKindly update accordingly.\")), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"p\", null, \"Chakra exports 7 components to help you create any modal dialog.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Modal\"), \": The wrapper that provides context for its children\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalOverlay\"), \": The dimmed overlay behind the modal dialog\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalContent\"), \": The container for the modal dialog's content\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalHeader\"), \": The header that labels the modal dialog\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalFooter\"), \": The footer that houses the modal actions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalBody\"), \": The wrapper that houses the modal's main content\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalCloseButton\"), \": The button that closes the modal.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {\\n  Modal,\\n  ModalOverlay,\\n  ModalContent,\\n  ModalHeader,\\n  ModalFooter,\\n  ModalBody,\\n  ModalCloseButton,\\n} from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"p\", null, \"When the modal opens, focus is sent into the modal and set to the first tabbable\\nelement. If there are no tabbled elements, focus is set on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalContent\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function BasicUsage() {\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n  return (\\n    <>\\n      <Button onClick={onOpen}>Open Modal</Button>\\n\\n      <Modal isOpen={isOpen} onClose={onClose}>\\n        <ModalOverlay>\\n          <ModalContent>\\n            <ModalHeader>Modal Title</ModalHeader>\\n            <ModalCloseButton />\\n            <ModalBody>\\n              <Lorem count={2} />\\n            </ModalBody>\\n\\n            <ModalFooter>\\n              <Button colorScheme=\\\"blue\\\" mr={3} onClick={onClose}>\\n                Close\\n              </Button>\\n              <Button variant=\\\"ghost\\\">Secondary Action</Button>\\n            </ModalFooter>\\n          </ModalContent>\\n        </ModalOverlay>\\n      </Modal>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"control-focus-when-modal-closes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Control Focus when Modal closes\"), mdx(\"p\", null, \"When the dialog closes, it returns focus to the element that triggered it. Set\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finalFocusRef\"), \" to change the element that should receive focus when the modal\\ncloses.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function ReturnFocus() {\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n  const finalRef = React.useRef()\\n\\n  return (\\n    <>\\n      <Box ref={finalRef} tabIndex={-1} aria-label=\\\"Focus moved to this box\\\">\\n        Some other content that'll receive focus on close.\\n      </Box>\\n\\n      <Button mt={4} onClick={onOpen}>\\n        Open Modal\\n      </Button>\\n      <Modal finalFocusRef={finalRef} isOpen={isOpen} onClose={onClose}>\\n        <ModalOverlay>\\n          <ModalContent>\\n            <ModalHeader>Modal Title</ModalHeader>\\n            <ModalCloseButton />\\n            <ModalBody>\\n              <Lorem count={2} />\\n            </ModalBody>\\n\\n            <ModalFooter>\\n              <Button colorScheme=\\\"blue\\\" mr={3} onClick={onClose}>\\n                Close\\n              </Button>\\n              <Button variant=\\\"ghost\\\">Secondary Action</Button>\\n            </ModalFooter>\\n          </ModalContent>\\n        </ModalOverlay>\\n      </Modal>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"block-scrolling-when-modal-opens\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Block Scrolling when Modal opens\"), mdx(\"p\", null, \"For accessibility, it's recommended to block scrolling on the main document\\nbehind the modal. Chakra does this by default but you can set\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shouldBlockScroll\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" to allow scrolling behind the modal.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function BasicUsage() {\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n\\n  return (\\n    <>\\n      <Button onClick={onOpen}>Open Modal</Button>\\n\\n      <Modal shouldBlockScroll={false} isOpen={isOpen} onClose={onClose}>\\n        <ModalOverlay>\\n          <ModalContent>\\n            <ModalHeader>Modal Title</ModalHeader>\\n            <ModalCloseButton />\\n            <ModalBody>\\n              <Text fontWeight=\\\"bold\\\" mb=\\\"1rem\\\">\\n                You can scroll the content behind the modal\\n              </Text>\\n              <Lorem count={2} />\\n            </ModalBody>\\n\\n            <ModalFooter>\\n              <Button colorScheme=\\\"blue\\\" mr={3} onClick={onClose}>\\n                Close\\n              </Button>\\n              <Button variant=\\\"ghost\\\">Secondary Action</Button>\\n            </ModalFooter>\\n          </ModalContent>\\n        </ModalOverlay>\\n      </Modal>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"focus-on-specific-element\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Focus on specific element\"), mdx(\"p\", null, \"Chakra automatically sets focus on the first tabbable element in the modal.\\nHowever, there might be scenarios where you need to manually control where focus\\ngoes.\"), mdx(\"p\", null, \"Chakra provides 2 props for this use case:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"initialFocusRef\"), \": The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ref\"), \" of the component that receives focus when the\\nmodal opens.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"finalFocusRef\"), \": The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ref\"), \" of the component that receives focus when the modal\\ncloses.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If you set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finalFocusRef\"), \", internally we set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shouldReturnFocusOnClose\"), \" to\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" so it doesn't return focus to the element that triggered it.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function InitialFocus() {\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n\\n  const initialRef = React.useRef()\\n  const finalRef = React.useRef()\\n\\n  return (\\n    <>\\n      <Button onClick={onOpen}>Open Modal</Button>\\n      <Button ml={4} ref={finalRef}>\\n        I'll receive focus on close\\n      </Button>\\n\\n      <Modal\\n        initialFocusRef={initialRef}\\n        finalFocusRef={finalRef}\\n        isOpen={isOpen}\\n        onClose={onClose}\\n      >\\n        <ModalOverlay>\\n          <ModalContent>\\n            <ModalHeader>Create your account</ModalHeader>\\n            <ModalCloseButton />\\n            <ModalBody pb={6}>\\n              <FormControl>\\n                <FormLabel>First name</FormLabel>\\n                <Input ref={initialRef} placeholder=\\\"First name\\\" />\\n              </FormControl>\\n\\n              <FormControl mt={4}>\\n                <FormLabel>Last name</FormLabel>\\n                <Input placeholder=\\\"Last name\\\" />\\n              </FormControl>\\n            </ModalBody>\\n\\n            <ModalFooter>\\n              <Button colorScheme=\\\"blue\\\" mr={3}>\\n                Save\\n              </Button>\\n              <Button onClick={onClose}>Cancel</Button>\\n            </ModalFooter>\\n          </ModalContent>\\n        </ModalOverlay>\\n      </Modal>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"close-modal-on-overlay-click\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Close Modal on Overlay Click\"), mdx(\"p\", null, \"By default, the modal closes when you click its overlay. You can set\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shouldCloseOnOverlayClick\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" if you want the modal to stay visible.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function ManualClose() {\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n\\n  return (\\n    <>\\n      <Button onClick={onOpen}>Open Modal</Button>\\n\\n      <Modal\\n        shouldCloseOnOverlayClick={false}\\n        isOpen={isOpen}\\n        onClose={onClose}\\n      >\\n        <ModalOverlay>\\n          <ModalContent>\\n            <ModalHeader>Create your account</ModalHeader>\\n            <ModalCloseButton />\\n            <ModalBody pb={6}>\\n              <Lorem count={2} />\\n            </ModalBody>\\n\\n            <ModalFooter>\\n              <Button colorScheme=\\\"blue\\\" mr={3}>\\n                Save\\n              </Button>\\n              <Button onClick={onClose}>Cancel</Button>\\n            </ModalFooter>\\n          </ModalContent>\\n        </ModalOverlay>\\n      </Modal>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"make-modal-vertically-centered\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Make modal vertically centered\"), mdx(\"p\", null, \"By default the modal has a vertical offset of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3.75rem\"), \" which you can change by\\npassing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ModalContent\"), \". If you need to vertically center the modal,\\npass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isCentered\"), \" prop.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If the content within the modal overflows beyond the viewport, don't use this\\nprop. Try setting the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#modal-overflow-behavior\"\n  }), \"overflow behavior\"), \" instead.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function VerticallyCenter() {\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n\\n  return (\\n    <>\\n      <Button onClick={onOpen}>Trigger modal</Button>\\n\\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\\n        <ModalOverlay>\\n          <ModalContent>\\n            <ModalHeader>Modal Title</ModalHeader>\\n            <ModalCloseButton />\\n            <ModalBody>\\n              <Lorem count={2} />\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button>Close</Button>\\n            </ModalFooter>\\n          </ModalContent>\\n        </ModalOverlay>\\n      </Modal>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"adding-transition\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Adding transition\"), mdx(\"p\", null, \"The modal doesn't come with any transitions by default so you can manage this\\nyourself. Chakra exports two transition components (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SlideIn\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Scale\"), \") to\\nprovide simple transitions.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For some reason, focus doesn't return back to the trigger after the transition\\nends. As a walkaround, you might need to set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"finalFocusRef\"), \" to the trigger or\\nany other element, and set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \".\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"function TransitionExample() {\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n  const btnRef = React.useRef()\\n\\n  return (\\n    <>\\n      <Button ref={btnRef} onClick={onOpen}>\\n        Trigger modal\\n      </Button>\\n\\n      <SlideIn in={isOpen}>\\n        {(styles) => (\\n          <Modal finalFocusRef={btnRef} onClose={onClose} isOpen={true}>\\n            <ModalOverlay opacity={styles.opacity}>\\n              <ModalContent pb={5} {...styles}>\\n                <ModalHeader>Login now</ModalHeader>\\n                <ModalCloseButton />\\n                <ModalBody>\\n                  <Lorem count={2} />\\n                </ModalBody>\\n              </ModalContent>\\n            </ModalOverlay>\\n          </Modal>\\n        )}\\n      </SlideIn>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"modal-overflow-behavior\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Modal overflow behavior\"), mdx(\"p\", null, \"If the content within the modal overflows beyond the viewport, you can use the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scrollBehavior\"), \" to control how scrolling should happen.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"inside\"), \", scroll only occurs within the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalBody\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"outside\"), \", the entire \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalContent\"), \" will scroll within the\\nviewport.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function ScrollingExample() {\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n  const [scrollBehavior, setScrollBehavior] = React.useState(\\\"inside\\\")\\n\\n  const btnRef = React.useRef()\\n  return (\\n    <>\\n      <RadioGroup value={scrollBehavior} onChange={setScrollBehavior}>\\n        <Stack direction=\\\"row\\\">\\n          <Radio value=\\\"inside\\\">inside</Radio>\\n          <Radio value=\\\"outside\\\">outside</Radio>\\n        </Stack>\\n      </RadioGroup>\\n\\n      <Button mt={3} ref={btnRef} onClick={onOpen}>\\n        Trigger modal\\n      </Button>\\n\\n      <Modal\\n        onClose={onClose}\\n        finalFocusRef={btnRef}\\n        isOpen={isOpen}\\n        scrollBehavior={scrollBehavior}\\n      >\\n        <ModalOverlay>\\n          <ModalContent>\\n            <ModalHeader>Modal Title</ModalHeader>\\n            <ModalCloseButton />\\n            <ModalBody>\\n              <Lorem size={5} />\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button>Close</Button>\\n            </ModalFooter>\\n          </ModalContent>\\n        </ModalOverlay>\\n      </Modal>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"modal-sizes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Modal Sizes\"), mdx(\"p\", null, \"Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop if you need to adjust the size of the modal. Values can be\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xs\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"md\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lg\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xl\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"full\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function SizeExample() {\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n  const [size, setSize] = React.useState(\\\"md\\\")\\n\\n  const handleSizeClick = (newSize) => {\\n    setSize(newSize)\\n    onOpen()\\n  }\\n\\n  const sizes = [\\\"xs\\\", \\\"sm\\\", \\\"md\\\", \\\"lg\\\", \\\"xl\\\", \\\"full\\\"]\\n\\n  return (\\n    <>\\n      {sizes.map((size) => (\\n        <Button\\n          onClick={() => handleSizeClick(size)}\\n          key={size}\\n          m={4}\\n        >{`Open ${size} Modal`}</Button>\\n      ))}\\n\\n      <Modal onClose={onClose} size={size} isOpen={isOpen}>\\n        <ModalOverlay>\\n          <ModalContent>\\n            <ModalHeader>Modal Title</ModalHeader>\\n            <ModalCloseButton />\\n            <ModalBody>\\n              <Lorem count={2} />\\n            </ModalBody>\\n            <ModalFooter>\\n              <Button>Close</Button>\\n            </ModalFooter>\\n          </ModalContent>\\n        </ModalOverlay>\\n      </Modal>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"making-other-elements-inert\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Making other elements Inert\"), mdx(\"p\", null, \"When the modal is open, it's rendered within a portal and all its siblings have\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-hidden\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" so the only thing screen readers see is the modal.\\nTo disable this behavior, set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useInert\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \".\"), mdx(\"h2\", {\n    \"id\": \"accessibility\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accessibility\"), mdx(\"h3\", {\n    \"id\": \"keyboard-and-focus-management\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Keyboard and Focus Management\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When the modal opens, focus is trapped within it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When the modal opens, focus is automatically set to the first enabled element,\\nor the element from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"initialFocusRef\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When the modal closes, focus returns to the element that was focused before\\nthe modal activated, or the element from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"finalFocusRef\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clicking on the overlay closes the Modal.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pressing \", mdx(\"kbd\", null, \"Esc\"), \" closes the Modal.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Scrolling is blocked on the elements behind the modal.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The modal is rendered in a portal attached to the end of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"document.body\"), \" to\\nbreak it out of the source order and make it easy to add \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-hidden\"), \" to its\\nsiblings.\")), mdx(\"h3\", {\n    \"id\": \"aria\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"ARIA\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalContent\"), \" has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-modal\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalContent\"), \" has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-labelledby\"), \" set to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id\"), \" of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalHeader\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalContent\"), \" has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-describedby\"), \" set to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id\"), \" of the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalBody\"))), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"modal-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Modal Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isOpen\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the modal will open\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onClose\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(event, reason) => void\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Callback invoked to close the modal.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isCentered\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Modal\"), \" will be centered on screen\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"initialFocusRef\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.Ref\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The least destructive action to get focus when dialog is open\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"finalFocusRef\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.Ref\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The least destructive action to get focus when dialog is open\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"shouldBlockScroll\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", scrolling will be disabled on the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"body\"), \" when the modal opens.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"useInert\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"A11y: If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the siblings of the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Modal\"), \" will have \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-hidden\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" so that screen readers can only see the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Modal\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"children\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The content of the modal.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"size\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"BoxProps[\\\"maxWidth\\\"]\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The size (maxWidth) of the modal.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"scrollBehavior\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"inside\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"outside\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"outside\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Where scroll behaviour should originate.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"shouldCloseOnOverlayClick\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the modal will close when the overlay is clicked\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"shouldReturnFocusOnClose\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the modal will return focus to the element that triggered it when it closes.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"shouldCloseOnEsc\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the modal will close when the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Esc\"), \" key is pressed\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"addAriaLabels\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{header: boolean, body: boolean}\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \", no \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-*\"), \" properties will be added by default.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"id\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\"), \" of the modal\")))), mdx(\"h3\", {\n    \"id\": \"other-components\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Other components\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalOverlay\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalHeader\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalFooter\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalBody\"), \" composes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Box\"), \"\\ncomponent\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ModalCloseButton\"), \" composes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CloseButton\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Modal","description":"A dialog is a window overlaid on either the primary window or another dialog window"},"tableOfContents":{"items":[{"url":"#modal-dialog","title":"Modal (Dialog)","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#control-focus-when-modal-closes","title":"Control Focus when Modal closes"},{"url":"#block-scrolling-when-modal-opens","title":"Block Scrolling when Modal opens"},{"url":"#focus-on-specific-element","title":"Focus on specific element"},{"url":"#close-modal-on-overlay-click","title":"Close Modal on Overlay Click"},{"url":"#make-modal-vertically-centered","title":"Make modal vertically centered"},{"url":"#adding-transition","title":"Adding transition"},{"url":"#modal-overflow-behavior","title":"Modal overflow behavior"},{"url":"#modal-sizes","title":"Modal Sizes"},{"url":"#making-other-elements-inert","title":"Making other elements Inert"}]},{"url":"#accessibility","title":"Accessibility","items":[{"url":"#keyboard-and-focus-management","title":"Keyboard and Focus Management"},{"url":"#aria","title":"ARIA"}]},{"url":"#props","title":"Props","items":[{"url":"#modal-props","title":"Modal Props"},{"url":"#other-components","title":"Other components"}]}]}]}}},"pageContext":{"slug":"/docs/components/modal","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/menu.mdx","frontmatter":{"title":"Menu","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/menu"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/numberinput.mdx","frontmatter":{"title":"Number Input","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/numberinput"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/docs/components/modal.mdx"}}}