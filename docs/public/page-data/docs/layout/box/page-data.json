{"componentChunkName":"component---src-templates-docs-js","path":"/docs/layout/box","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Box\",\n  \"package\": \"@chakra-ui/layout\",\n  \"image\": \"components/box.svg\",\n  \"description\": \"Box is the most abstract component on top of which all other Chakra UI components are built. By default, it renders a `div` element\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"box\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Box\"), mdx(\"p\", null, \"Box is the most abstract component on top of which all other Chakra UI\\ncomponents are built. By default, it renders a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" element\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/layout\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"br\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The Box component is useful because it helps with 3 common use cases:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create responsive layouts with ease.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provide a shorthand way to pass styles via props (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bg\"), \" instead of\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"backgroundColor\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Compose new component and allow for override using the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"as\"), \" prop.\")), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Box } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Box bg=\\\"tomato\\\" w=\\\"100%\\\" p={4} color=\\\"white\\\">\\n  This is the Box\\n</Box>\\n\")), mdx(\"h3\", {\n    \"id\": \"usage-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// Sample card from Airbnb\\n\\nfunction AirbnbExample() {\\n  const property = {\\n    imageUrl: \\\"https://bit.ly/2Z4KKcF\\\",\\n    imageAlt: \\\"Rear view of modern home with pool\\\",\\n    beds: 3,\\n    baths: 2,\\n    title: \\\"Modern home in city center in the heart of historic Los Angeles\\\",\\n    formattedPrice: \\\"$1,900.00\\\",\\n    reviewCount: 34,\\n    rating: 4,\\n  }\\n\\n  return (\\n    <Box maxW=\\\"sm\\\" borderWidth=\\\"1px\\\" borderRadius=\\\"lg\\\" overflow=\\\"hidden\\\">\\n      <Image src={property.imageUrl} alt={property.imageAlt} />\\n\\n      <Box p=\\\"6\\\">\\n        <Box d=\\\"flex\\\" alignItems=\\\"baseline\\\">\\n          <Badge borderRadius=\\\"full\\\" px=\\\"2\\\" colorScheme=\\\"teal\\\">\\n            New\\n          </Badge>\\n          <Box\\n            color=\\\"gray.500\\\"\\n            fontWeight=\\\"semibold\\\"\\n            letterSpacing=\\\"wide\\\"\\n            fontSize=\\\"xs\\\"\\n            textTransform=\\\"uppercase\\\"\\n            ml=\\\"2\\\"\\n          >\\n            {property.beds} beds &bull; {property.baths} baths\\n          </Box>\\n        </Box>\\n\\n        <Box\\n          mt=\\\"1\\\"\\n          fontWeight=\\\"semibold\\\"\\n          as=\\\"h4\\\"\\n          lineHeight=\\\"tight\\\"\\n          isTruncated\\n        >\\n          {property.title}\\n        </Box>\\n\\n        <Box>\\n          {property.formattedPrice}\\n          <Box as=\\\"span\\\" color=\\\"gray.600\\\" fontSize=\\\"sm\\\">\\n            / wk\\n          </Box>\\n        </Box>\\n\\n        <Box d=\\\"flex\\\" mt=\\\"2\\\" alignItems=\\\"center\\\">\\n          {Array(5)\\n            .fill(\\\"\\\")\\n            .map((_, i) => (\\n              <StarIcon\\n                key={i}\\n                color={i < property.rating ? \\\"teal.500\\\" : \\\"gray.300\\\"}\\n              />\\n            ))}\\n          <Box as=\\\"span\\\" ml=\\\"2\\\" color=\\\"gray.600\\\" fontSize=\\\"sm\\\">\\n            {property.reviewCount} reviews\\n          </Box>\\n        </Box>\\n      </Box>\\n    </Box>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"as-prop\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"as prop\"), mdx(\"p\", null, \"You can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"as\"), \" prop to change the element render, just like\\nstyled-components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Box as=\\\"button\\\" borderRadius=\\\"md\\\" bg=\\\"tomato\\\" color=\\\"white\\\" px={4} h={8}>\\n  Button\\n</Box>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Box","description":"Box is the most abstract component on top of which all other Chakra UI components are built. By default, it renders a `div` element"},"tableOfContents":{"items":[{"url":"#box","title":"Box","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#usage-1","title":"Usage"},{"url":"#as-prop","title":"as prop"}]}]}]}}},"pageContext":{"slug":"/docs/layout/box","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/layout/aspectratio.mdx","frontmatter":{"title":"Aspect Ratio","order":null},"fields":{"collection":"docs/layout","slug":"/docs/layout/aspectratio"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/layout/center.mdx","frontmatter":{"title":"Center","order":null},"fields":{"collection":"docs/layout","slug":"/docs/layout/center"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/docs/layout/box.mdx"}}}