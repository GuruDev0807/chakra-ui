{"componentChunkName":"component---src-templates-docs-js","path":"/components/drawer","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Drawer\",\n  \"package\": \"@chakra-ui/drawer\",\n  \"image\": \"components/drawer.svg\",\n  \"description\": \"The Drawer component is a panel that slides out from the edge of the screen. It can be useful when you need users to complete a task or view some details without leaving the current page.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"drawer\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Drawer\"), mdx(\"p\", null, \"The Drawer component is a panel that slides out from the edge of the screen. It\\ncan be useful when you need users to complete a task or view some details\\nwithout leaving the current page.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/drawer\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"h2\", {\n    \"id\": \"installation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Installation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {\\n  Drawer,\\n  DrawerBody,\\n  DrawerFooter,\\n  DrawerHeader,\\n  DrawerOverlay,\\n  DrawerContent,\\n  DrawerCloseButton,\\n} from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"h3\", {\n    \"id\": \"basic-drawer\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Basic Drawer\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function DrawerExample() {\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n  const btnRef = React.useRef()\\n\\n  return (\\n    <>\\n      <Button ref={btnRef} colorScheme=\\\"teal\\\" onClick={onOpen}>\\n        Open\\n      </Button>\\n      <Drawer\\n        isOpen={isOpen}\\n        placement=\\\"right\\\"\\n        onClose={onClose}\\n        finalFocusRef={btnRef}\\n      >\\n        <DrawerOverlay>\\n          <DrawerContent>\\n            <DrawerCloseButton />\\n            <DrawerHeader>Create your account</DrawerHeader>\\n\\n            <DrawerBody>\\n              <Input placeholder=\\\"Type here...\\\" />\\n            </DrawerBody>\\n\\n            <DrawerFooter>\\n              <Button variant=\\\"outline\\\" mr={3} onClick={onClose}>\\n                Cancel\\n              </Button>\\n              <Button color=\\\"blue\\\">Save</Button>\\n            </DrawerFooter>\\n          </DrawerContent>\\n        </DrawerOverlay>\\n      </Drawer>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"drawer-placement\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Drawer placement\"), mdx(\"p\", null, \"The Drawer can appear from any edge of the screen. Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"placement\"), \" prop and\\nset it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"right\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bottom\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function PlacementExample() {\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n  const [placement, setPlacement] = React.useState(\\\"right\\\")\\n\\n  return (\\n    <>\\n      <RadioGroup defaultValue={placement} onChange={setPlacement}>\\n        <Stack direction=\\\"row\\\" mb=\\\"4\\\">\\n          <Radio value=\\\"top\\\">Top</Radio>\\n          <Radio value=\\\"right\\\">Right</Radio>\\n          <Radio value=\\\"bottom\\\">Bottom</Radio>\\n          <Radio value=\\\"left\\\">Left</Radio>\\n        </Stack>\\n      </RadioGroup>\\n      <Button colorScheme=\\\"blue\\\" onClick={onOpen}>\\n        Open\\n      </Button>\\n      <Drawer placement={placement} onClose={onClose} isOpen={isOpen}>\\n        <DrawerOverlay>\\n          <DrawerContent>\\n            <DrawerHeader borderBottomWidth=\\\"1px\\\">Basic Drawer</DrawerHeader>\\n            <DrawerBody>\\n              <p>Some contents...</p>\\n              <p>Some contents...</p>\\n              <p>Some contents...</p>\\n            </DrawerBody>\\n          </DrawerContent>\\n        </DrawerOverlay>\\n      </Drawer>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"focus-on-specific-element\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Focus on specific element\"), mdx(\"p\", null, \"When a form is in the drawer, you might need to set focus on a specific element\\nwhen the drawer opens. Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialFocusRef\"), \" prop.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Without the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialFocusRef\"), \" prop, the drawer will set focus on the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"first\\nfocusable element\"), \" when it opens.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function DrawerExample() {\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n  const firstField = React.useRef()\\n  const btnRef = React.useRef()\\n\\n  return (\\n    <>\\n      <Button ref={btnRef} leftIcon=\\\"add\\\" colorScheme=\\\"teal\\\" onClick={onOpen}>\\n        Create user\\n      </Button>\\n      <Drawer\\n        isOpen={isOpen}\\n        placement=\\\"right\\\"\\n        initialFocusRef={firstField}\\n        finalFocusRef={btnRef}\\n        onClose={onClose}\\n      >\\n        <DrawerOverlay>\\n          <DrawerContent>\\n            <DrawerCloseButton />\\n            <DrawerHeader borderBottomWidth=\\\"1px\\\">\\n              Create a new account\\n            </DrawerHeader>\\n\\n            <DrawerBody>\\n              <Stack spacing=\\\"24px\\\">\\n                <Box>\\n                  <FormLabel htmlFor=\\\"username\\\">Name</FormLabel>\\n                  <Input\\n                    ref={firstField}\\n                    id=\\\"username\\\"\\n                    placeholder=\\\"Please enter user name\\\"\\n                  />\\n                </Box>\\n\\n                <Box>\\n                  <FormLabel htmlFor=\\\"url\\\">Url</FormLabel>\\n                  <InputGroup>\\n                    <InputLeftAddon>http://</InputLeftAddon>\\n                    <Input\\n                      type=\\\"url\\\"\\n                      id=\\\"url\\\"\\n                      placeholder=\\\"Please enter password\\\"\\n                      borderRadius=\\\"0\\\"\\n                    />\\n                    <InputRightAddon>.com</InputRightAddon>\\n                  </InputGroup>\\n                </Box>\\n\\n                <Box>\\n                  <FormLabel htmlFor=\\\"owner\\\">Select Owner</FormLabel>\\n                  <Select id=\\\"owner\\\" defaultValue=\\\"segun\\\">\\n                    <option value=\\\"segun\\\">Segun Adebayo</option>\\n                    <option value=\\\"kola\\\">Kola Tioluwani</option>\\n                  </Select>\\n                </Box>\\n\\n                <Box>\\n                  <FormLabel htmlFor=\\\"desc\\\">Description</FormLabel>\\n                  <Textarea id=\\\"desc\\\" />\\n                </Box>\\n              </Stack>\\n            </DrawerBody>\\n\\n            <DrawerFooter borderTopWidth=\\\"1px\\\">\\n              <Button variant=\\\"outline\\\" mr={3} onClick={onClose}>\\n                Cancel\\n              </Button>\\n              <Button colorScheme=\\\"blue\\\">Submit</Button>\\n            </DrawerFooter>\\n          </DrawerContent>\\n        </DrawerOverlay>\\n      </Drawer>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"drawer-widths\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Drawer Widths\"), mdx(\"p\", null, \"Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop if you need to adjust the size of the drawer. Values can be\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xs\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"md\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lg\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xl\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"full\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function SizeExample() {\\n  const [size, setSize] = React.useState(\\\"md\\\")\\n  const { isOpen, onOpen, onClose } = useDisclosure()\\n\\n  const handleClick = (newSize) => {\\n    setSize(newSize)\\n    onOpen()\\n  }\\n\\n  const sizes = [\\\"xs\\\", \\\"sm\\\", \\\"md\\\", \\\"lg\\\", \\\"xl\\\", \\\"full\\\"]\\n\\n  return (\\n    <>\\n      {sizes.map((size) => (\\n        <Button\\n          onClick={() => handleClick(size)}\\n          key={size}\\n          m={4}\\n        >{`Open ${size} Drawer`}</Button>\\n      ))}\\n\\n      <Drawer onClose={onClose} isOpen={isOpen} size={size}>\\n        <DrawerOverlay>\\n          <DrawerContent>\\n            <DrawerHeader>{`${size} drawer contents`}</DrawerHeader>\\n            <DrawerBody>\\n              {size === \\\"full\\\"\\n                ? `You're trapped \\uD83D\\uDE06, refresh the page to leave`\\n                : null}\\n            </DrawerBody>\\n          </DrawerContent>\\n        </DrawerOverlay>\\n      </Drawer>\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accessibility\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When opening the Drawer, focus is trapped inside the Drawer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"By default, the drawer sets focus on the first focusable element. If the\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"initialFocusRef\"), \" prop is passed, the drawer sets focus on the element with\\nthe assigned \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ref\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After the drawer closes, it'll return focus to the element that triggered it.\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"drawer-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Drawer Props\"), mdx(\"p\", null, \"Drawer composes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Modal\"), \" component with these extra props:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isFullHeight\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"placement\"), \" is set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"top\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bottom\"), \", the drawer fills the height of the viewport.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"placement\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"left\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"right\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"top\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"bottom\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"right\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The ref to the initial element to receive focus when the drawer opens.\")))), mdx(\"h3\", {\n    \"id\": \"other-components\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Other components\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DrawerOverlay\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DrawerFooter\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DrawerHeader\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DrawerBody\"), \" composes\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Box\"), \" component\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DrawerCloseButton\"), \" composes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CloseButton\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Drawer","description":"The Drawer component is a panel that slides out from the edge of the screen. It can be useful when you need users to complete a task or view some details without leaving the current page."},"tableOfContents":{"items":[{"url":"#drawer","title":"Drawer","items":[{"url":"#installation","title":"Installation"},{"url":"#usage","title":"Usage","items":[{"url":"#basic-drawer","title":"Basic Drawer"},{"url":"#drawer-placement","title":"Drawer placement"},{"url":"#focus-on-specific-element","title":"Focus on specific element"},{"url":"#drawer-widths","title":"Drawer Widths"}]},{"url":"#accessibility","title":"Accessibility"},{"url":"#props","title":"Props","items":[{"url":"#drawer-props","title":"Drawer Props"},{"url":"#other-components","title":"Other components"}]}]}]}}},"pageContext":{"slug":"/components/drawer","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/collapse.mdx","frontmatter":{"title":"Collapse","order":null},"fields":{"collection":"components","slug":"/components/collapse"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/editable.mdx","frontmatter":{"title":"Editable","order":null},"fields":{"collection":"components","slug":"/components/editable"}},"modifiedTime":"June 10, 2020","relativePath":"/docs/pages/components/drawer.mdx"}}}