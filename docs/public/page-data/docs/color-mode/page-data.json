{"componentChunkName":"component---src-templates-docs-js","path":"/docs/color-mode","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Color Mode\",\n  \"package\": \"@chakra-ui/color-mode\",\n  \"description\": \"Working with color mode (light and dark mode) in Chakra UI\",\n  \"order\": 4\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"color-mode\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Color Mode\"), mdx(\"p\", null, \"By default, most of Chakra's component are dark mode compatible. To handle color\\nmode manually in your application, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useColorMode\"), \" hook. This value will\\nbe stored in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localStorage\"), \" and used whenever the page is loaded.\"), mdx(\"h2\", {\n    \"id\": \"enable-color-mode\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Enable Color Mode\"), mdx(\"p\", null, \"To enable this behavior within your apps, wrap your application in a\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ColorModeProvider\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"import * as React from \\\"react\\\"\\nimport { ThemeProvider, ColorModeProvider } from \\\"@chakra-ui/core\\\"\\n\\nfunction Example({ children }) {\\n  return (\\n    <ThemeProvider>\\n      <ColorModeProvider>{children}</ColorModeProvider>\\n    </ThemeProvider>\\n  )\\n}\\n\")), mdx(\"p\", null, \"Then you can use the hook \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useColorMode\"), \" within your application.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function ColorModeExample() {\\n  const [colorMode, toggleColorMode] = useColorMode()\\n  return (\\n    <header>\\n      <Button onClick={toggleColorMode}>\\n        Toggle {colorMode === \\\"light\\\" ? \\\"Dark\\\" : \\\"Light\\\"}\\n      </Button>\\n    </header>\\n  )\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"styling-color-modes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Styling color modes\"), mdx(\"p\", null, \"To style dark mode in your components, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useColorModeValue\"), \" hook to\\nchange the styles of your component.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useColorModeValue\"), \" takes 2 arguments: the value in light mode, and the value in\\ndark mode.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"// here's the signature\\nconst bg = useColorModeValue(lightMode, darkMode)\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Click the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Toggle Mode\"), \" button to see it in action.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function StyleColorMode() {\\n  const [colorMode, toggleColorMode] = useColorMode()\\n  const bg = useColorModeValue(\\\"red.500\\\", \\\"red.200\\\")\\n  const color = useColorModeValue(\\\"white\\\", \\\"gray.800\\\")\\n\\n  return (\\n    <>\\n      <Box flex=\\\"1\\\" mb={4} bg={bg} color={color}>\\n        This box's style will change based on the color mode.\\n      </Box>\\n      <Button size=\\\"sm\\\" onClick={toggleColorMode}>\\n        Toggle Mode\\n      </Button>\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"forcing-a-specific-mode\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Forcing a specific mode\"), mdx(\"p\", null, \"In some occasions, you might want Chakra components to look the same in both\\nlight and dark modes. To achieve this, wrap the component in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LightMode\"), \" or\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DarkMode\"), \" component. Doing this will override the global \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colorMode\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Click the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\"Toggle Mode\\\"\"), \" button to see it in action.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function Example() {\\n  const [colorMode, toggleColorMode] = useColorMode()\\n\\n  return (\\n    <HStack>\\n      <LightMode>\\n        <Button size=\\\"sm\\\" colorScheme=\\\"blue\\\">\\n          Light Mode Always\\n        </Button>\\n      </LightMode>\\n\\n      <DarkMode>\\n        <Button size=\\\"sm\\\" colorScheme=\\\"blue\\\">\\n          Dark Mode Always\\n        </Button>\\n      </DarkMode>\\n\\n      <Button size=\\\"sm\\\" colorScheme=\\\"blue\\\" onClick={toggleColorMode}>\\n        Toggle Mode\\n      </Button>\\n    </HStack>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Color Mode","description":"Working with color mode (light and dark mode) in Chakra UI"},"tableOfContents":{"items":[{"url":"#color-mode","title":"Color Mode","items":[{"url":"#enable-color-mode","title":"Enable Color Mode"},{"url":"#styling-color-modes","title":"Styling color modes"},{"url":"#forcing-a-specific-mode","title":"Forcing a specific mode"}]}]}}},"pageContext":{"slug":"/docs/color-mode","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/style-props.mdx","frontmatter":{"title":"Style Props","order":3},"fields":{"collection":"docs","slug":"/docs/style-props"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/responsive-styles.mdx","frontmatter":{"title":"Responsive Styles","order":5},"fields":{"collection":"docs","slug":"/docs/responsive-styles"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/docs/color-mode.mdx"}}}