{"componentChunkName":"component---src-templates-docs-js","path":"/docs/components/select","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Select\",\n  \"package\": \"@chakra-ui/select\",\n  \"image\": \"components/wrap.svg\",\n  \"description\": \"Select component is a component that allows users pick a value from predefined options.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"select\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Select\"), mdx(\"p\", null, \"Select component is a component that allows users pick a value from predefined\\noptions. Ideally, it should be used when there are more than 5 options,\\notherwise you might consider using a radio group instead.\"), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Select } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"p\", null, \"Here's a basic usage of the Select component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Select placeholder=\\\"Select option\\\">\\n  <option value=\\\"option1\\\">Option 1</option>\\n  <option value=\\\"option2\\\">Option 2</option>\\n  <option value=\\\"option3\\\">Option 3</option>\\n</Select>\\n\")), mdx(\"h3\", {\n    \"id\": \"changing-the-size-of-the-select\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the size of the Select\"), mdx(\"p\", null, \"There are three sizes of select : large (48px), default (40px) and small (32px).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack spacing={3}>\\n  <Select placeholder=\\\"large size\\\" size=\\\"lg\\\" />\\n  <Select placeholder=\\\"default size\\\" size=\\\"md\\\" />\\n  <Select placeholder=\\\"small size\\\" size=\\\"sm\\\" />\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"changing-the-appearance-of-the-select\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the appearance of the Select\"), mdx(\"p\", null, \"Just like the input component, select comes in 3 variants, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"outline\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unstyled\"), \"\\n, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flushed\"), \" , and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filled\"), \". Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \" prop and set it to either of\\nthese values.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack spacing={3}>\\n  <Select variant=\\\"outline\\\" placeholder=\\\"Outline\\\" />\\n  <Select variant=\\\"filled\\\" placeholder=\\\"Filled\\\" />\\n  <Select variant=\\\"flushed\\\" placeholder=\\\"Flushed\\\" />\\n  <Select variant=\\\"unstyled\\\" placeholder=\\\"Unstyled\\\" />\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"changing-the-icon-in-the-select\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the icon in the Select\"), mdx(\"p\", null, \"As with most Chakra components, you can change the arrow icon used in the\\nselect. Simply pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icon\"), \" prop.\"), mdx(\"p\", null, \"In case the custom icon size doesn't look right, you can pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iconSize\"), \"\\nprop to change it.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uD83D\\uDEA8 This feature works in v0.5.1. Kindly upgrade if you need it\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Select\\n  icon={<MdArrowDropDown />}\\n  iconSize={8}\\n  placeholder=\\\"Woohoo! A new icon\\\"\\n/>\\n\")), mdx(\"h3\", {\n    \"id\": \"overriding-the-styles-of-the-select\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Overriding the styles of the Select\"), mdx(\"p\", null, \"Even though the select comes with predefined styles, you can override pretty\\nmuch any property. Here's we'll override the background color.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Select\\n  bg=\\\"tomato\\\"\\n  borderColor=\\\"tomato\\\"\\n  color=\\\"white\\\"\\n  placeholder=\\\"Woohoo! A new background color!\\\"\\n/>\\n\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"p\", null, \"The Select component composes \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/box\"\n  }), \"Box\"), \" so you can pass all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PseudoBox\"), \" props,\\nand native \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"select\"), \" props in addition to these:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"size\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lg\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The visual size of the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"select\"), \" element.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"icon\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactElement\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"<ChevronDown/>\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The icon to use in place if the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"chevron-down\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"iconSize\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"BoxProps['size']\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"20px\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The visual size of the icon\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"iconColor\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"BoxProps['color']\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The color of the icon\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"outline\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"unstyled\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"flushed\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"filled\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"outline\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The variant of the select style to use.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"focusBorderColor\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The border color when the select is focused.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"errorBorderColor\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The border color when \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isInvalid\"), \" is set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isDisabled\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the select will be disabled. This sets \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-disabled=true\"), \" and you can style this state by passing \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"_disabled\"), \" prop.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isInvalid\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"select\"), \" will indicate an error. This sets \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-invalid=true\"), \" and you can style this state by passing \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"_invalid\"), \" prop.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isRequired\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the select element will be required.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isReadOnly\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", prevents the value of the select from being edited.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"rootProps\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"BoxProps\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The props to pass to the wrapper of the select. The select is wrapped in a \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Box\"), \" to help align the icon, if you want to pass some props to that wrapper, use this prop\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Select","description":"Select component is a component that allows users pick a value from predefined options."},"tableOfContents":{"items":[{"url":"#select","title":"Select","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#changing-the-size-of-the-select","title":"Changing the size of the Select"},{"url":"#changing-the-appearance-of-the-select","title":"Changing the appearance of the Select"},{"url":"#changing-the-icon-in-the-select","title":"Changing the icon in the Select"},{"url":"#overriding-the-styles-of-the-select","title":"Overriding the styles of the Select"}]},{"url":"#props","title":"Props"}]}]}}},"pageContext":{"slug":"/docs/components/select","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/radio.mdx","frontmatter":{"title":"Radio","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/radio"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/skeleton.mdx","frontmatter":{"title":"Skeleton","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/skeleton"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/docs/components/select.mdx"}}}