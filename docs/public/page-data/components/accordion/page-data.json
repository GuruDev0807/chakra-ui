{"componentChunkName":"component---src-templates-docs-js","path":"/components/accordion","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Accordion\",\n  \"package\": \"@chakra-ui/accordion\",\n  \"image\": \"components/accordion.svg\",\n  \"description\": \"Accordions display a list of high-level options that can expand/collapse to reveal more information.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"accordion\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accordion\"), mdx(\"p\", null, \"Accordions display a list of high-level options that can expand/collapse to\\nreveal more information.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/accordion\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"p\", null, \"Chakra UI exports 5 accordion-related components.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Accordion\"), \": The wrapper that uses cloneElement to pass props to\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AccordionItem\"), \" children.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AccordionItem\"), \": A single accordion item.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AccordionButton\"), \": The button that toggles the expand/collapse state of the\\naccordion item.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AccordionPanel\"), \": The container for the details to be revealed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AccordionIcon\"), \": A \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chevron-down\"), \" icon that rotates based on the\\nexpanded/collapsed state\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {\\n  Accordion,\\n  AccordionItem,\\n  AccordionButton,\\n  AccordionPanel,\\n  AccordionIcon,\\n} from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"p\", null, \"By default, only one item may be expanded and it can only be collapsed again by\\nexpanding another.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Accordion>\\n  <AccordionItem>\\n    <AccordionButton>\\n      <Box flex=\\\"1\\\" textAlign=\\\"left\\\">\\n        Section 1 title\\n      </Box>\\n      <AccordionIcon />\\n    </AccordionButton>\\n    <AccordionPanel pb={4}>\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\\n      commodo consequat.\\n    </AccordionPanel>\\n  </AccordionItem>\\n\\n  <AccordionItem>\\n    <AccordionButton>\\n      <Box flex=\\\"1\\\" textAlign=\\\"left\\\">\\n        Section 2 title\\n      </Box>\\n      <AccordionIcon />\\n    </AccordionButton>\\n    <AccordionPanel pb={4}>\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\\n      commodo consequat.\\n    </AccordionPanel>\\n  </AccordionItem>\\n</Accordion>\\n\")), mdx(\"h3\", {\n    \"id\": \"expand-multiple-items-at-once\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Expand multiple items at once\"), mdx(\"p\", null, \"If you set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"allowMultiple\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" then the accordion will permit multiple\\nitems to be expanded at once.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If you pass this prop, ensure that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultIndex\"), \" prop is an\\narray.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Accordion defaultIndex={[0]} allowMultiple>\\n  <AccordionItem>\\n    <AccordionButton>\\n      <Box flex=\\\"1\\\" textAlign=\\\"left\\\">\\n        Section 1 title\\n      </Box>\\n      <AccordionIcon />\\n    </AccordionButton>\\n    <AccordionPanel pb={4}>\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\\n      commodo consequat.\\n    </AccordionPanel>\\n  </AccordionItem>\\n\\n  <AccordionItem>\\n    <AccordionButton>\\n      <Box flex=\\\"1\\\" textAlign=\\\"left\\\">\\n        Section 2 title\\n      </Box>\\n      <AccordionIcon />\\n    </AccordionButton>\\n    <AccordionPanel pb={4}>\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\\n      commodo consequat.\\n    </AccordionPanel>\\n  </AccordionItem>\\n</Accordion>\\n\")), mdx(\"h3\", {\n    \"id\": \"toggle-each-accordion-item\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Toggle each accordion item\"), mdx(\"p\", null, \"If you set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"allowToggle\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", any expanded item may be collapsed again.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Accordion allowToggle>\\n  <AccordionItem>\\n    <AccordionButton>\\n      <Box flex=\\\"1\\\" textAlign=\\\"left\\\">\\n        Section 1 title\\n      </Box>\\n      <AccordionIcon />\\n    </AccordionButton>\\n    <AccordionPanel pb={4}>\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\\n      commodo consequat.\\n    </AccordionPanel>\\n  </AccordionItem>\\n\\n  <AccordionItem>\\n    <AccordionButton>\\n      <Box flex=\\\"1\\\" textAlign=\\\"left\\\">\\n        Section 2 title\\n      </Box>\\n      <AccordionIcon />\\n    </AccordionButton>\\n    <AccordionPanel pb={4}>\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\\n      commodo consequat.\\n    </AccordionPanel>\\n  </AccordionItem>\\n</Accordion>\\n\")), mdx(\"h3\", {\n    \"id\": \"styling-the-expanded-state\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Styling the expanded state\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccordionButton\"), \" component has \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-expanded\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \"\\ndepending on the state of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccordionItem\"), \". Use the style prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_expanded\"), \" to\\nstyle this state.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Accordion>\\n  <AccordionItem>\\n    <AccordionButton _expanded={{ bg: \\\"tomato\\\", color: \\\"white\\\" }}>\\n      <Box flex=\\\"1\\\" textAlign=\\\"left\\\">\\n        Click me to see a different style\\n      </Box>\\n      <AccordionIcon />\\n    </AccordionButton>\\n    <AccordionPanel>\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\\n      commodo consequat.\\n    </AccordionPanel>\\n  </AccordionItem>\\n</Accordion>\\n\")), mdx(\"h3\", {\n    \"id\": \"accessing-the-internal-state\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accessing the internal state\"), mdx(\"p\", null, \"If you need access to the internal state of each accordion item, you can use a\\nrender prop. It provides 2 internal state props: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isExpanded\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isDisabled\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Accordion allowMultiple>\\n  <AccordionItem>\\n    <AccordionButton>\\n      <Box flex=\\\"1\\\" textAlign=\\\"left\\\">\\n        Section 1 title\\n      </Box>\\n      <AccordionIcon />\\n    </AccordionButton>\\n    <AccordionPanel pb={4}>\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\\n      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\\n      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\\n      commodo consequat.\\n    </AccordionPanel>\\n  </AccordionItem>\\n\\n  <AccordionItem>\\n    {({ isExpanded }) => (\\n      <>\\n        <AccordionButton>\\n          <Box flex=\\\"1\\\" textAlign=\\\"left\\\">\\n            Section 2 title\\n          </Box>\\n          {isExpanded ? (\\n            <MinusIcon fontSize=\\\"12px\\\" />\\n          ) : (\\n            <AddIcon fontSize=\\\"12px\\\" />\\n          )}\\n        </AccordionButton>\\n        <AccordionPanel pb={4}>\\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\\n          aliquip ex ea commodo consequat.\\n        </AccordionPanel>\\n      </>\\n    )}\\n  </AccordionItem>\\n</Accordion>\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accessibility\"), mdx(\"p\", null, \"Pressing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"space\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enter\"), \" when focus is on the accordion panel header will\\ntoggle (expand or collapse) the accordion.\"), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"accordion-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accordion Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"allowMultiple\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", multiple accordion items can be expanded at once.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"allowToggle\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", any expanded accordion item can be collapsed again.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"index\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"NumberOrArrayOfNumber\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The index(es) of the expanded accordion item\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"defaultIndex\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"NumberOrArrayOfNumber\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The initial index(es) of the expanded accordion item\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onChange\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(NumberOrArrayOfNumber) => void\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The callback invoked when accordion items are expanded or collapsed.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"children\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ReactNode\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The content of the accordion. The children must be the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"AccordionButton\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"AccordionPanel\"), \" components.\")))), mdx(\"h3\", {\n    \"id\": \"accordionitem-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"AccordionItem Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isOpen\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", expands the accordion in the controlled mode.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"defaultIsOpen\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", expands the accordion by on initial mount.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"id\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"A unique \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\"), \" for the accordion item.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isDisabled\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the accordion header will be disabled.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onChange\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(NumberOrArrayOfNumber) => void\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The callback fired when the accordion is expanded/collapsed.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"children\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ReactNode\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(RenderProps) => ReactNode\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The content of the accordion. The children must be the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"AccordionButton\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"AccordionPanel\"), \" components.\")))), mdx(\"br\", null), mdx(\"h3\", {\n    \"id\": \"accordionbutton-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"AccordionButton Props\"), mdx(\"p\", null, \"AccordionButton renders a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"button\"), \" and composes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \", this means you can style\\nit by passing the pseudo style props \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_expanded\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_disabled\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_hover\"), \", etc.\"), mdx(\"br\", null), mdx(\"h3\", {\n    \"id\": \"accordionpanel-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"AccordionPanel Props\"), mdx(\"p\", null, \"AccordionPanel renders a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" and composes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Collapse\"), \" to provide the height\\nanimation.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Accordion","description":"Accordions display a list of high-level options that can expand/collapse to reveal more information."},"tableOfContents":{"items":[{"url":"#accordion","title":"Accordion","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#expand-multiple-items-at-once","title":"Expand multiple items at once"},{"url":"#toggle-each-accordion-item","title":"Toggle each accordion item"},{"url":"#styling-the-expanded-state","title":"Styling the expanded state"},{"url":"#accessing-the-internal-state","title":"Accessing the internal state"}]},{"url":"#accessibility","title":"Accessibility"},{"url":"#props","title":"Props","items":[{"url":"#accordion-props","title":"Accordion Props"},{"url":"#accordionitem-props","title":"AccordionItem Props"},{"url":"#accordionbutton-props","title":"AccordionButton Props"},{"url":"#accordionpanel-props","title":"AccordionPanel Props"}]}]}]}}},"pageContext":{"slug":"/components/accordion","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/migration.mdx","frontmatter":{"title":"Upgrade to v1","order":null},"fields":{"collection":"main","slug":"/migration"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/alert.mdx","frontmatter":{"title":"Alert","order":null},"fields":{"collection":"components","slug":"/components/alert"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/components/accordion.mdx"}}}