{"componentChunkName":"component---src-templates-docs-js","path":"/docs/components/editable","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Editable\",\n  \"package\": \"@chakra-ui/editable\",\n  \"image\": \"components/editable-text.svg\",\n  \"description\": \"EditableText is used for inline renaming of some text. It appears as normal UI text but transforms into a text input field when the user clicks or focuses on it.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"editable-text\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Editable Text\"), mdx(\"p\", null, \"EditableText is used for inline renaming of some text. It appears as normal UI\\ntext but transforms into a text input field when the user clicks on or focuses\\nit.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/editable\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"p\", null, \"The text input inherits all font styling from its parent in order to make the\\nedit and read view transition seamless.\"), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"p\", null, \"Chakra UI exports 3 components to handle this functionality.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Editable\"), \": The wrapper component that provides context value.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"EditableInput\"), \": The edit view of the component. It shows when you click or\\nfocus on the text.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"EditablePreview\"), \": The read-only view of the component.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Editable, EditableInput, EditablePreview } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// Click the text to edit\\n<Editable defaultValue=\\\"Take some chakra\\\">\\n  <EditablePreview />\\n  <EditableInput />\\n</Editable>\\n\")), mdx(\"h3\", {\n    \"id\": \"with-custom-controls\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"With custom controls\"), mdx(\"p\", null, \"In some cases, you might need to use custom controls to toggle the edit and read\\nmode. We use the render prop pattern to provide access to the internal state of\\nthe component.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Ensure you set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isPreviewFocusable\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"submitOnBlur\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" for this to\\nwork.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function CustomControlsExample() {\\n  /* Here's a custom control */\\n  function EditableControls({ isEditing, onSubmit, onCancel, onRequestEdit }) {\\n    return isEditing ? (\\n      <ButtonGroup justifyContent=\\\"center\\\" size=\\\"sm\\\">\\n        <IconButton icon=\\\"check\\\" onClick={onSubmit} />\\n        <IconButton icon=\\\"close\\\" onClick={onCancel} />\\n      </ButtonGroup>\\n    ) : (\\n      <Flex justifyContent=\\\"center\\\">\\n        <IconButton size=\\\"sm\\\" icon=\\\"edit\\\" onClick={onRequestEdit} />\\n      </Flex>\\n    )\\n  }\\n\\n  return (\\n    <Editable\\n      textAlign=\\\"center\\\"\\n      defaultValue=\\\"Rasengan \\u26A1\\uFE0F\\\"\\n      fontSize=\\\"2xl\\\"\\n      isPreviewFocusable={false}\\n      submitOnBlur={false}\\n    >\\n      {(props) => (\\n        <>\\n          <EditablePreview />\\n          <EditableInput />\\n          <EditableControls {...props} />\\n        </>\\n      )}\\n    </Editable>\\n  )\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"editable-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Editable Props\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Editable\"), \" component composes the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/box\"\n  }), \"Box\"), \" component so you can pass all\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" props. Here are the custom props:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"value\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Text value of the controlled input\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"defaultValue\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The initial value of the Editable in both edit & preview mode\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"placeholder\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"Click to edit...\\\"\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The placeholder text when the value is empty.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isDisabled\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the Editable will be disabled.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onChange\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"func\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Callback invoked when user changes input.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onCancel\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Callback invoked when user cancels input with the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Esc\"), \" key. It provides the last confirmed value as argument.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onSubmit\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Callback invoked when user confirms value with \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"enter\"), \" key or by blurring the input.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onEdit\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Callback invoked once the user enters edit mode.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isPreviewFocusable\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the read only view, has a \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"tabIndex\"), \" set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0\"), \" so it can receive focus via the keyboard or click.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"startWithEditView\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the Editable will start with edit mode by default.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"submitOnBlur\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", it'll update the value onBlur and turn off the edit mode.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"selectAllOnFocus\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the input's text will be highlighted on focus.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"children\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The content of the EditableText. Ideally only \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"EditablePreview\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"EditableInput\"), \" should be the children but you add other elements too\")))), mdx(\"br\", null), mdx(\"h3\", {\n    \"id\": \"editableinput-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"EditableInput Props\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EditableInput\"), \" composes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PseudoBox\"), \" so you can pass all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PseudoBox\"), \" props.\"), mdx(\"br\", null), mdx(\"h3\", {\n    \"id\": \"editablepreview-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"EditablePreview Props\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EditablePreview\"), \" composes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PseudoBox\"), \" so you can pass all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PseudoBox\"), \" props.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Editable","description":"EditableText is used for inline renaming of some text. It appears as normal UI text but transforms into a text input field when the user clicks or focuses on it."},"tableOfContents":{"items":[{"url":"#editable-text","title":"Editable Text","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#with-custom-controls","title":"With custom controls"}]},{"url":"#props","title":"Props","items":[{"url":"#editable-props","title":"Editable Props"},{"url":"#editableinput-props","title":"EditableInput Props"},{"url":"#editablepreview-props","title":"EditablePreview Props"}]}]}]}}},"pageContext":{"slug":"/docs/components/editable","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/drawer.mdx","frontmatter":{"title":"Drawer","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/drawer"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/formcontrol.mdx","frontmatter":{"title":"Form Control","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/formcontrol"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/docs/components/editable.mdx"}}}