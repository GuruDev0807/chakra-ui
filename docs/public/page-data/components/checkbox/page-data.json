{"componentChunkName":"component---src-templates-docs-js","path":"/components/checkbox","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Checkbox\",\n  \"package\": \"@chakra-ui/checkbox\",\n  \"image\": \"components/checkbox.svg\",\n  \"description\": \"Checkbox component is used in forms when a user needs to select multiple values from several options.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"checkbox\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Checkbox\"), mdx(\"p\", null, \"The Checkbox component is used in forms when a user needs to select multiple\\nvalues from several options.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/checkbox\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"p\", null, \"Native HTML checkboxes are 100% accessible by default, so we used a\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dev.to/lkopacz/create-custom-keyboard-accessible-checkboxes-2036\"\n  }), \"very common CSS technique\"), \"\\nto style the checkboxes.\"), mdx(\"p\", null, \"The Checkbox component composes \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/controlbox\"\n  }), \"ControlBox\"), \", a component we\\ncreated to make it easy to style an element based on sibling inputs.\"), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Checkbox, CheckboxGroup } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"p\", null, \"Basic usage of checkbox.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Checkbox defaultIsChecked>Checkbox</Checkbox>\\n\")), mdx(\"h3\", {\n    \"id\": \"disabled-checkbox\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Disabled Checkbox\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack spacing={10} direction=\\\"row\\\">\\n  <Checkbox isDisabled>Checkbox</Checkbox>\\n  <Checkbox isDisabled defaultIsChecked>\\n    Checkbox\\n  </Checkbox>\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"checkbox-with-custom-color\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Checkbox with custom color\"), mdx(\"p\", null, \"You can override the color scheme of the checkbox to any color key specified in\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.colors\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack spacing={10} direction=\\\"row\\\">\\n  <Checkbox colorScheme=\\\"red\\\" defaultIsChecked>\\n    Checkbox\\n  </Checkbox>\\n  <Checkbox colorScheme=\\\"green\\\" defaultIsChecked>\\n    Checkbox\\n  </Checkbox>\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"checkbox-sizes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Checkbox sizes\"), mdx(\"p\", null, \"Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop to change the size of the Checkbox. Values can be either\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"md\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lg\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack spacing={10} direction=\\\"row\\\">\\n  <Checkbox size=\\\"sm\\\" colorScheme=\\\"red\\\">\\n    Checkbox\\n  </Checkbox>\\n  <Checkbox size=\\\"md\\\" colorScheme=\\\"green\\\" defaultIsChecked>\\n    Checkbox\\n  </Checkbox>\\n  <Checkbox size=\\\"lg\\\" colorScheme=\\\"orange\\\" defaultIsChecked>\\n    Checkbox\\n  </Checkbox>\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"invalid-checkbox\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Invalid Checkbox\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Checkbox isInvalid>Checkbox</Checkbox>\\n\")), mdx(\"h3\", {\n    \"id\": \"indeterminate\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Indeterminate\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function IndeterminateExample() {\\n  const [checkedItems, setCheckedItems] = React.useState([false, false])\\n\\n  const allChecked = checkedItems.every(Boolean)\\n  const isIndeterminate = checkedItems.some(Boolean) && !allChecked\\n\\n  return (\\n    <>\\n      <Checkbox\\n        isChecked={allChecked}\\n        isIndeterminate={isIndeterminate}\\n        onChange={(e) => setCheckedItems([e.target.checked, e.target.checked])}\\n        children=\\\"Parent Checkbox\\\"\\n      />\\n      <Stack pl={6} mt={1} spacing={1}>\\n        <Checkbox\\n          isChecked={checkedItems[0]}\\n          onChange={(e) => setCheckedItems([e.target.checked, checkedItems[1]])}\\n          children=\\\"Child Checkbox 1\\\"\\n        />\\n        <Checkbox\\n          isChecked={checkedItems[1]}\\n          onChange={(e) => setCheckedItems([checkedItems[0], e.target.checked])}\\n          children=\\\"Child Checkbox 2\\\"\\n        />\\n      </Stack>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"checkboxgroup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CheckboxGroup\"), mdx(\"p\", null, \"Chakra exports a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CheckboxGroup\"), \" component to help manage the checked state of\\nits children.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CheckboxGroup colorScheme=\\\"green\\\" defaultValue={[\\\"naruto\\\", \\\"kakashi\\\"]}>\\n  <HStack>\\n    <Checkbox value=\\\"naruto\\\">Naruto</Checkbox>\\n    <Checkbox value=\\\"sasuke\\\">Sasuke</Checkbox>\\n    <Checkbox value=\\\"kakashi\\\">kakashi</Checkbox>\\n  </HStack>\\n</CheckboxGroup>\\n\")), mdx(\"p\", null, \"You can also make checkbox group appear horizontally by passing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isInline\"), \"\\nprop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<CheckboxGroup colorScheme=\\\"teal\\\" defaultValue={[\\\"itachi\\\", \\\"kisame\\\"]}>\\n  <HStack spacing={8}>\\n    <Checkbox value=\\\"itachi\\\">Itachi</Checkbox>\\n    <Checkbox value=\\\"madara\\\">Madara</Checkbox>\\n    <Checkbox value=\\\"kisame\\\">Kisame</Checkbox>\\n  </HStack>\\n</CheckboxGroup>\\n\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"h3\", {\n    \"id\": \"checkbox-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Checkbox Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"id\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The id assigned to input field\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"name\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The name of the input field in a checkbox (Useful for form submission)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"value\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The value to be used in the checkbox input. This is the value that will be returned on form submission.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"colorScheme\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The color of the checkbox when it's checked. This should be one of the color keys in the theme (e.g.\\\"green\\\", \\\"red\\\")\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"defaultIsChecked\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the checkbox will be initially checked.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isChecked\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the checkbox will be checked. You'll need to pass \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onChange\"), \" to update it's value (since it's now controlled)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isIndeterminate\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the checkbox will be indeterminate. This only affects the icon shown inside checkbox\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isFullWidth\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the checkbox should take up the full width of the parent.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"size\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lg\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The size (width and height) of the checkbox\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isDisabled\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the checkbox will be disabled\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isInvalid\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the checkbox is marked as invalid. Changes style of unchecked state.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"children\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The children of the checkbox.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onChange\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"function\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Function called when the state of the checkbox changes.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onBlur\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"function\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Function called when you blur out of the checkbox.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onFocus\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"function\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Function called when the checkbox receive focus.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"aria-label\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"An accessible label for the checkbox in event there's no visible label or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\"), \" passed\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"aria-labelledby\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Id that points to the label for the checkbox in event no \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\"), \" was passed\")))), mdx(\"h3\", {\n    \"id\": \"checkboxgroup-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CheckboxGroup Props\"), mdx(\"p\", null, \"CheckboxGroup composes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" so you can pass all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" props.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"id\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The id of the checkbox group.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"name\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The name of the checkbox group. This attribute is\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"value\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Array<Checkbox[\\\"value\\\"]>\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The value of the checkbox group\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"defaultValue\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Array<Checkbox[\\\"value\\\"]>\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The initial value of the checkbox group\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"colorScheme\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The color of the checkbox when it's checked. This should be one of the color keys in the theme (e.g.\\\"green\\\", \\\"red\\\")\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"onChange\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(values: Array<Checkbox[\\\"value\\\"]>): void\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The callback fired when any children Checkbox is checked or unchecked\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"children\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The content of the checkbox group. Must be the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Checkbox\"), \" component\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"spacing\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"StyledSystem.MarginProps\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"8px\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The space between each checkbox\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"size\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lg\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The size of the checkbox, it's forwarded to all children checkbox.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"isInline\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the checkboxes will aligned horizontally.\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Checkbox","description":"Checkbox component is used in forms when a user needs to select multiple values from several options."},"tableOfContents":{"items":[{"url":"#checkbox","title":"Checkbox","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#disabled-checkbox","title":"Disabled Checkbox"},{"url":"#checkbox-with-custom-color","title":"Checkbox with custom color"},{"url":"#checkbox-sizes","title":"Checkbox sizes"},{"url":"#invalid-checkbox","title":"Invalid Checkbox"},{"url":"#indeterminate","title":"Indeterminate"},{"url":"#checkboxgroup","title":"CheckboxGroup"}]},{"url":"#props","title":"Props","items":[{"url":"#checkbox-props","title":"Checkbox Props"},{"url":"#checkboxgroup-props","title":"CheckboxGroup Props"}]}]}]}}},"pageContext":{"slug":"/components/checkbox","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/button.mdx","frontmatter":{"title":"Button","order":null},"fields":{"collection":"components","slug":"/components/button"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/circularprogress.mdx","frontmatter":{"title":"Circular Progress","order":null},"fields":{"collection":"components","slug":"/components/circularprogress"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/components/checkbox.mdx"}}}