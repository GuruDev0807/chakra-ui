{"componentChunkName":"component---src-templates-docs-js","path":"/components/input","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Input\",\n  \"package\": \"@chakra-ui/input\",\n  \"image\": \"components/input.svg\",\n  \"description\": \"Input component is a component that is used to get user input in a text field.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"input\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Input\"), mdx(\"p\", null, \"The Input component is a component that is used to get user input in a text\\nfield.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/input\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Input } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"p\", null, \"Here's a basic usage example of the Input component:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Input placeholder=\\\"Basic usage\\\" />\\n\")), mdx(\"h3\", {\n    \"id\": \"changing-the-size-of-the-input\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the size of the Input\"), mdx(\"p\", null, \"There are three sizes of an Input:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sm\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"24px\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"md\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"32px\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"lg\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"40px\"), \")\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack spacing={3}>\\n  <Input placeholder=\\\"large size\\\" size=\\\"lg\\\" />\\n  <Input placeholder=\\\"default size\\\" size=\\\"md\\\" />\\n  <Input placeholder=\\\"small size\\\" size=\\\"sm\\\" />\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"changing-the-appearance-of-the-input\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the appearance of the input\"), mdx(\"p\", null, \"The input component comes in 4 variants: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"outline\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unstyled\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flushed\"), \", and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filled\"), \". Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \" prop and set it to onf of these values.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack spacing={3}>\\n  <Input variant=\\\"outline\\\" placeholder=\\\"Outline\\\" />\\n  <Input variant=\\\"filled\\\" placeholder=\\\"Filled\\\" />\\n  <Input variant=\\\"flushed\\\" placeholder=\\\"Flushed\\\" />\\n  <Input variant=\\\"unstyled\\\" placeholder=\\\"Unstyled\\\" />\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"left-and-right-addons\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Left and Right Addons\"), mdx(\"p\", null, \"Like bootstrap, you can add addons to the left and right of the input component.\\nChakra UI exports \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputGroup\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputLeftAddon\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputRightAddon\"), \" to help\\nwith this use case.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack spacing={4}>\\n  <InputGroup>\\n    <InputLeftAddon children=\\\"+234\\\" />\\n    <Input type=\\\"phone\\\" borderLeftRadius=\\\"0\\\" placeholder=\\\"phone number\\\" />\\n  </InputGroup>\\n\\n  {/* If you add the size prop to `InputGroup`, it'll pass it to all it's children. */}\\n  <InputGroup size=\\\"sm\\\">\\n    <InputLeftAddon children=\\\"https://\\\" />\\n    <Input borderRadius=\\\"0\\\" placeholder=\\\"mysite\\\" />\\n    <InputRightAddon children=\\\".com\\\" />\\n  </InputGroup>\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"add-elements-inside-input\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Add elements inside input\"), mdx(\"p\", null, \"In some scenarios, you might need to add an icon or button inside the input\\ncomponent. Chakra UI exports \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputLeftElement\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputRightElement\"), \" to help\\nwith this use case.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack spacing={4}>\\n  <InputGroup>\\n    <InputLeftElement children={<PhoneIcon color=\\\"gray.300\\\" />} />\\n    <Input type=\\\"phone\\\" placeholder=\\\"Phone number\\\" />\\n  </InputGroup>\\n\\n  <InputGroup>\\n    <InputLeftElement color=\\\"gray.300\\\" fontSize=\\\"1.2em\\\" children=\\\"$\\\" />\\n    <Input placeholder=\\\"Enter amount\\\" />\\n    <InputRightElement children={<CheckIcon color=\\\"green.500\\\" />} />\\n  </InputGroup>\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"password-input-example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Password Input Example\"), mdx(\"p\", null, \"Let's use these components to create a password input with a show/hide password\\nfunctionality:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function PasswordInput() {\\n  const [show, setShow] = React.useState(false)\\n  const handleClick = () => setShow(!show)\\n\\n  return (\\n    <InputGroup size=\\\"md\\\">\\n      <Input\\n        pr=\\\"4.5rem\\\"\\n        type={show ? \\\"text\\\" : \\\"password\\\"}\\n        placeholder=\\\"Enter password\\\"\\n      />\\n      <InputRightElement width=\\\"4.5rem\\\">\\n        <Button h=\\\"1.75rem\\\" size=\\\"sm\\\" onClick={handleClick}>\\n          {show ? \\\"Hide\\\" : \\\"Show\\\"}\\n        </Button>\\n      </InputRightElement>\\n    </InputGroup>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"controlled-input\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Controlled Input\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function Example() {\\n  const [value, setValue] = React.useState(\\\"\\\")\\n  const handleChange = (event) => setValue(event.target.value)\\n\\n  return (\\n    <>\\n      <Text mb=\\\"8px\\\">Value: {value}</Text>\\n      <Input\\n        value={value}\\n        onChange={handleChange}\\n        placeholder=\\\"Here is a sample placeholder\\\"\\n        size=\\\"sm\\\"\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"changing-the-focus-and-error-border-colors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the focus and error border colors\"), mdx(\"p\", null, \"You can change the border color that shows when the input receives focus\\n(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"focusBorderColor\"), \") and when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isInvalid\"), \" is set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"errorBorderColor\"), \").\\nThe value can be set to a color in the theme object, like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"teal.400\"), \", or a raw\\nCSS value.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack spacing={3}>\\n  <Input focusBorderColor=\\\"lime\\\" placeholder=\\\"Here is a sample placeholder\\\" />\\n  <Input\\n    focusBorderColor=\\\"pink.400\\\"\\n    placeholder=\\\"Here is a sample placeholder\\\"\\n  />\\n  <Input\\n    isInvalid\\n    errorBorderColor=\\\"red.300\\\"\\n    placeholder=\\\"Here is a sample placeholder\\\"\\n  />\\n  <Input\\n    isInvalid\\n    errorBorderColor=\\\"crimson\\\"\\n    placeholder=\\\"Here is a sample placeholder\\\"\\n  />\\n</Stack>\\n\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"p\", null, \"The Input component composes \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/pseudobox\"\n  }), \"PseudoBox\"), \" so you can pass all\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PseudoBox\"), \" props, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.InputHTMLAttributes\"), \".\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"as\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ElementType\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"input\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The component to use in place of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"input\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-label\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Accessibility label to use, in scenarios where the input has no visible label. A11y: It's usefult for screen readers.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-describedby\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Accessibility label to use, in scenarios where the input has no visible label. A11y: It's usefult for screen readers.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isDisabled\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the input will be disabled. This sets \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-disabled=true\"), \" and you can style this state by passing \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"_disabled\"), \" prop.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isInvalid\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"input\"), \" will indicate an error. This sets \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-invalid=true\"), \" and you can style this state by passing \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"_invalid\"), \" prop.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isRequired\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the input element will be required.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isFullWidth\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the input element will span the full width of it's parent.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isReadOnly\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", prevents the value of the input from being edited.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"size\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lg\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The visual size of the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"input\"), \" element.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"outline\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"unstyled\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"flushed\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"filled\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"outline\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The variant of the input style to use.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"focusBorderColor\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The border color when the input is focused.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"errorBorderColor\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The border color when \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isInvalid\"), \" is set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \".\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Input","description":"Input component is a component that is used to get user input in a text field."},"tableOfContents":{"items":[{"url":"#input","title":"Input","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#changing-the-size-of-the-input","title":"Changing the size of the Input"},{"url":"#changing-the-appearance-of-the-input","title":"Changing the appearance of the input"},{"url":"#left-and-right-addons","title":"Left and Right Addons"},{"url":"#add-elements-inside-input","title":"Add elements inside input"},{"url":"#password-input-example","title":"Password Input Example"},{"url":"#controlled-input","title":"Controlled Input"},{"url":"#changing-the-focus-and-error-border-colors","title":"Changing the focus and error border colors"}]},{"url":"#props","title":"Props"}]}]}}},"pageContext":{"slug":"/components/input","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/image.mdx","frontmatter":{"title":"Image","order":null},"fields":{"collection":"components","slug":"/components/image"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/keyboardkey.mdx","frontmatter":{"title":"Keyboard Key","order":null},"fields":{"collection":"components","slug":"/components/keyboardkey"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/components/input.mdx"}}}