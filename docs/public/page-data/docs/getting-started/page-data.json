{"componentChunkName":"component---src-templates-docs-js","path":"/docs/getting-started","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Installation\",\n  \"description\": \"Install Chakra UI and its peer dependencies. Create a theme object to include custom color, typography, and layout values. Chakra UI comes with a default theme, so this step is optional.\",\n  \"order\": 1\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"getting-started\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Getting Started\"), mdx(\"p\", null, \"Install Chakra UI and its peer dependencies.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm i @chakra-ui/core\\n\\n#or\\n\\nyarn add @chakra-ui/core\\n\")), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"p\", null, \"Create a theme object to include custom color, typography, and layout values.\\nChakra UI comes with a default theme, so this step is optional.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// example theme.js\\nexport default {\\n  breakpoints: [\\\"30em\\\", \\\"48em\\\", \\\"62em\\\", \\\"80em\\\"],\\n  fonts: {\\n    heading: '\\\"Avenir Next\\\", sans-serif',\\n    body: \\\"system-ui, sans-serif\\\",\\n    mono: \\\"Menlo, monospace\\\",\\n  },\\n  fontSizes: {\\n    xs: \\\"0.75rem\\\",\\n    sm: \\\"0.875rem\\\",\\n    md: \\\"1rem\\\",\\n    lg: \\\"1.125rem\\\",\\n    xl: \\\"1.25rem\\\",\\n    \\\"2xl\\\": \\\"1.5rem\\\",\\n    \\\"3xl\\\": \\\"1.875rem\\\",\\n    \\\"4xl\\\": \\\"2.25rem\\\",\\n    \\\"5xl\\\": \\\"3rem\\\",\\n    \\\"6xl\\\": \\\"4rem\\\",\\n  },\\n}\\n\")), mdx(\"p\", null, \"You can also extend the theme to add your custom colors, fonts, etc.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { theme } from \\\"@chakra-ui/core\\\"\\n\\n// Let's say you want to add custom colors\\nconst customTheme = {\\n  ...theme,\\n  colors: {\\n    ...theme.colors,\\n    brand: {\\n      900: \\\"#1a365d\\\",\\n      800: \\\"#153e75\\\",\\n      700: \\\"#2a69ac\\\",\\n    },\\n  },\\n}\\n\")), mdx(\"p\", null, \"Add the theme to your application with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeProvider\"), \", passing in the theme\\nobject as a prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"import * as React from \\\"react\\\"\\nimport { ThemeProvider } from \\\"@chakra-ui/core\\\"\\n\\n// Use at the root of your app\\nfunction AppRoot() {\\n  return (\\n    <ThemeProvider>\\n      <App />\\n    </ThemeProvider>\\n  )\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"using-components\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Using components\"), mdx(\"p\", null, \"Simply import components by name from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@chakra-ui/core\"), \" package, as demonstrated\\nbelow.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Button } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"injecting-global-styles\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Injecting global styles\"), mdx(\"p\", null, \"Sometimes you may need to apply css reset styles to your application. Chakra UI\\nexports a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CSSReset\"), \" that'll remove browser default styles. It's heavily\\ninspired by\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://unpkg.com/tailwindcss@1.1.2/dist/base.css\"\n  }), \"Tailwind's preflight\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uD83D\\uDEA8 We highly recommend that you add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CSSReset\"), \" at the root of your\\napplication to ensure all components work correctly.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=false\",\n    \"live\": \"false\"\n  }), \"// import customTheme from \\\"./theme\\\"\\n\\nfunction App({ children }) {\\n  return (\\n    <ThemeProvider theme={customTheme}>\\n      <CSSReset />\\n      {children}\\n    </ThemeProvider>\\n  )\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"adding-icons\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Adding Icons\"), mdx(\"p\", null, \"You can use custom icons from standard libraries like\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://react-icons.netlify.com\"\n  }), \"react-icons\"), \" or you can add the icon \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path\"), \" in\\nthe theme object.\"), mdx(\"p\", null, \"To add the icon to the theme object, add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icons\"), \" key as shown below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// theme.js\\nexport default {\\n  icons: {\\n    // Add Chakra's icons\\n    ...theme.icons,\\n    // Your custom icons\\n    search: {\\n      // The <path/> or <g> element for the svg. Note the use of  `fill=currentColor`\\n      path: (\\n        <path\\n          fill=\\\"currentColor\\\"\\n          d=\\\"M23.384,21.619,16.855,15.09a9.284,9.284,0,1,0-1.768,1.768l6.529,6.529a1.266,1.266,0,0,0,1.768,0A1.251,1.251,0,0,0,23.384,21.619ZM2.75,9.5a6.75,6.75,0,1,1,6.75,6.75A6.758,6.758,0,0,1,2.75,9.5Z\\\"\\n        />\\n      ),\\n      // This is the viewBox of the icon.\\n      viewBox: \\\"0 0 24 24\\\",\\n    },\\n  },\\n}\\n\")), mdx(\"p\", null, \"Once you add the icons, you can then use them within the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Icon\"), \" component, like\\nthis;\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live=true\",\n    \"live\": \"true\"\n  }), \"<SearchIcon color=\\\"red.500\\\" />\\n\")), mdx(\"h2\", {\n    \"id\": \"contributing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Contributing\"), mdx(\"p\", null, \"Please see our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/contributing\"\n  }), \"contribution guidelines\"), \" to learn how you can\\ncontribute to this project.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Installation","description":"Install Chakra UI and its peer dependencies. Create a theme object to include custom color, typography, and layout values. Chakra UI comes with a default theme, so this step is optional."},"tableOfContents":{"items":[{"url":"#getting-started","title":"Getting Started","items":[{"url":"#using-components","title":"Using components"},{"url":"#injecting-global-styles","title":"Injecting global styles"},{"url":"#adding-icons","title":"Adding Icons"},{"url":"#contributing","title":"Contributing"}]}]}}},"pageContext":{"slug":"/docs/getting-started","layout":"docs","previous":null,"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/principles.mdx","frontmatter":{"title":"Design Principles","order":2},"fields":{"collection":"docs","slug":"/docs/principles"}},"modifiedTime":"June 10, 2020","relativePath":"/docs/pages/docs/getting-started.mdx"}}}