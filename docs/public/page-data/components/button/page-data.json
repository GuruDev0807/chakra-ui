{"componentChunkName":"component---src-templates-docs-js","path":"/components/button","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Button\",\n  \"package\": \"@chakra-ui/button\",\n  \"image\": \"components/button.svg\",\n  \"description\": \"Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"button\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Button\"), mdx(\"p\", null, \"The Button component is used to trigger an action or event, such as submitting a\\nform, opening a dialog, canceling an action, or performing a delete operation.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/button\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Button } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Button colorScheme=\\\"green\\\">Button</Button>\\n\")), mdx(\"h3\", {\n    \"id\": \"button-sizes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Button Sizes\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop to change the size of the button. You can set the value to\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xs\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"md\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lg\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack spacing={4} direction=\\\"row\\\" align=\\\"center\\\">\\n  <Button colorScheme=\\\"teal\\\" size=\\\"xs\\\">\\n    Button\\n  </Button>\\n  <Button colorScheme=\\\"teal\\\" size=\\\"sm\\\">\\n    Button\\n  </Button>\\n  <Button colorScheme=\\\"teal\\\" size=\\\"md\\\">\\n    Button\\n  </Button>\\n  <Button colorScheme=\\\"teal\\\" size=\\\"lg\\\">\\n    Button\\n  </Button>\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"button-variant\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Button Variant\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \" prop to change the visual style of the Button. You can set the\\nvalue to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"solid\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ghost\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"outline\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"link\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack direction=\\\"row\\\" spacing={4} align=\\\"center\\\">\\n  <Button colorScheme=\\\"teal\\\" variant=\\\"solid\\\">\\n    Button\\n  </Button>\\n  <Button colorScheme=\\\"teal\\\" variant=\\\"outline\\\">\\n    Button\\n  </Button>\\n  <Button colorScheme=\\\"teal\\\" variant=\\\"ghost\\\">\\n    Button\\n  </Button>\\n  <Button colorScheme=\\\"teal\\\" variant=\\\"link\\\">\\n    Button\\n  </Button>\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"button-with-icon\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Button with Icon\"), mdx(\"p\", null, \"You can add left and right icons to the Button component using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"leftIcon\"), \"\\nand \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RightIcon\"), \" props respectively.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"leftIcon\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rightIcon\"), \" prop values should be react elements NOT\\nstrings.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack direction=\\\"row\\\" spacing={4}>\\n  <Button leftIcon={<EmailIcon />} colorScheme=\\\"teal\\\" variant=\\\"solid\\\">\\n    Email\\n  </Button>\\n  <Button rightIcon={<ArrowForwardIcon />} colorScheme=\\\"teal\\\" variant=\\\"outline\\\">\\n    Call us\\n  </Button>\\n</Stack>\\n\")), mdx(\"p\", null, \"You can also use icons from popular libraries like\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://react-icons.netlify.com\"\n  }), \"react-icons\"), \" and pass it into the button.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// -> import {MdBuild , MdCall} from \\\"react-icons/md\\\"\\n\\n<Stack direction=\\\"row\\\" spacing={4}>\\n  <Button leftIcon={<MdBuild />} colorScheme=\\\"pink\\\" variant=\\\"solid\\\">\\n    Settings\\n  </Button>\\n  <Button rightIcon={<MdCall />} colorScheme=\\\"blue\\\" variant=\\\"outline\\\">\\n    Call us\\n  </Button>\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"button-loading-state\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Button loading state\"), mdx(\"p\", null, \"Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isLoading\"), \" prop to show its loading state. By default, the button will\\nshow a spinner and leave the button's width unchanged.\"), mdx(\"p\", null, \"You can also pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loadingText\"), \" prop to show a spinner and the loading text.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack direction=\\\"row\\\" spacing={4}>\\n  <Button isLoading colorScheme=\\\"teal\\\" variant=\\\"solid\\\">\\n    Email\\n  </Button>\\n  <Button\\n    isLoading\\n    loadingText=\\\"Submitting\\\"\\n    colorScheme=\\\"teal\\\"\\n    variant=\\\"outline\\\"\\n  >\\n    Submit\\n  </Button>\\n</Stack>\\n\")), mdx(\"p\", null, \"You can also change the spinner itself to use custom loaders as per your design\\nrequirements. Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spinner\"), \" prop and set it to a custom react element.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Button\\n  isLoading\\n  colorScheme=\\\"blue\\\"\\n  spinner={<BeatLoader size={8} color=\\\"white\\\" />}\\n>\\n  Click me\\n</Button>\\n\")), mdx(\"h3\", {\n    \"id\": \"social-buttons\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Social Buttons\"), mdx(\"p\", null, \"We've included the colors for common social media platforms, and you can simply\\nuse their buttons via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colorScheme\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<HStack>\\n  <Button colorScheme=\\\"facebook\\\" leftIcon={<FaFacebook />}>\\n    Facebook\\n  </Button>\\n  <Button colorScheme=\\\"twitter\\\" leftIcon={<FaTwitter />}>\\n    Twitter\\n  </Button>\\n</HStack>\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accessibility\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Button has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"role\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"button\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When Button has focus, \", mdx(\"kbd\", null, \"Space\"), \" or \", mdx(\"kbd\", null, \"Enter\"), \" activates it.\")), mdx(\"h2\", {\n    \"id\": \"composition\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Composition\"), mdx(\"p\", null, \"All props you pass (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colorScheme\"), \", etc.) are converted to style\\nprops. This means you can override any style of the Button via props.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// The size prop affects the height of the button\\n// but I can still override it by passing a custom height\\n<Button\\n  size=\\\"md\\\"\\n  height=\\\"48px\\\"\\n  width=\\\"200px\\\"\\n  border=\\\"2px\\\"\\n  borderColor=\\\"green.500\\\"\\n>\\n  Button\\n</Button>\\n\")), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"custom-button\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Custom Button\"), mdx(\"p\", null, \"In the event that you need to make your own custom button, you can leverage the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" component. It provides the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hover\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"focus\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"active\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabled\"), \" style\\nprops to style the button.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// Button from facebook.com\\n<Box\\n  as=\\\"button\\\"\\n  height=\\\"24px\\\"\\n  lineHeight=\\\"1.2\\\"\\n  transition=\\\"all 0.2s cubic-bezier(.08,.52,.52,1)\\\"\\n  border=\\\"1px\\\"\\n  px=\\\"8px\\\"\\n  borderRadius=\\\"2px\\\"\\n  fontSize=\\\"14px\\\"\\n  fontWeight=\\\"semibold\\\"\\n  bg=\\\"#f5f6f7\\\"\\n  borderColor=\\\"#ccd0d5\\\"\\n  color=\\\"#4b4f56\\\"\\n  _hover={{ bg: \\\"#ebedf0\\\" }}\\n  _active={{\\n    bg: \\\"#dddfe2\\\",\\n    transform: \\\"scale(0.98)\\\",\\n    borderColor: \\\"#bec3c9\\\",\\n  }}\\n  _focus={{\\n    boxShadow:\\n      \\\"0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)\\\",\\n  }}\\n>\\n  Join Group\\n</Box>\\n\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"p\", null, \"Button composes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" component so you can pass all props for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \". These\\nare props specific to the Button component.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-label\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The label of the button\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"colorScheme\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"blue\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The color of the button. Use the colors in \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"theme.colors\"), \" that have \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"50\"), \" - \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"900\"), \" values.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"outline\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ghost\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"unstyled\"), \" , \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"link\"), \" , \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"solid\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"solid\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The variant of the button style to use.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isDisabled\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the button will be disabled.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isLoading\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the button will show a spinner.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"loadingText\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The label to show in the button when \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isLoading\"), \" is true. If no text is passed, it only shows the spinner\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"size\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lg\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The size of the button.\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Button","description":"Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation."},"tableOfContents":{"items":[{"url":"#button","title":"Button","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#button-sizes","title":"Button Sizes"},{"url":"#button-variant","title":"Button Variant"},{"url":"#button-with-icon","title":"Button with Icon"},{"url":"#button-loading-state","title":"Button loading state"},{"url":"#social-buttons","title":"Social Buttons"}]},{"url":"#accessibility","title":"Accessibility"},{"url":"#composition","title":"Composition"},{"url":"#custom-button","title":"Custom Button"},{"url":"#props","title":"Props"}]}]}}},"pageContext":{"slug":"/components/button","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/breadcrumb.mdx","frontmatter":{"title":"Breadcrumb","order":null},"fields":{"collection":"components","slug":"/components/breadcrumb"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/checkbox.mdx","frontmatter":{"title":"Checkbox","order":null},"fields":{"collection":"components","slug":"/components/checkbox"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/components/button.mdx"}}}