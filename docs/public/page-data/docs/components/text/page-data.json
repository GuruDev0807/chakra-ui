{"componentChunkName":"component---src-templates-docs-js","path":"/docs/components/text","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Text\",\n  \"package\": \"@chakra-ui/layout\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"text\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Text\"), mdx(\"p\", null, \"Text is the used to render text and paragraphs within an interface. It renders a\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<p>\"), \" tag by default.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/layout\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Text } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"changing-the-font-size\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the font size\"), mdx(\"p\", null, \"To increase the font size of the text, you can pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fontSize\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack spacing={3}>\\n  <Text fontSize=\\\"6xl\\\">In love with React & Next</Text>\\n  <Text fontSize=\\\"5xl\\\">In love with React & Next</Text>\\n  <Text fontSize=\\\"4xl\\\">In love with React & Next</Text>\\n  <Text fontSize=\\\"3xl\\\">In love with React & Next</Text>\\n  <Text fontSize=\\\"2xl\\\">In love with React & Next</Text>\\n  <Text fontSize=\\\"xl\\\">In love with React & Next</Text>\\n  <Text fontSize=\\\"lg\\\">In love with React & Next</Text>\\n  <Text fontSize=\\\"md\\\">In love with React & Next</Text>\\n  <Text fontSize=\\\"sm\\\">In love with React & Next</Text>\\n  <Text fontSize=\\\"xs\\\">In love with React & Next</Text>\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"truncate-text\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Truncate text\"), mdx(\"p\", null, \"Pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isTruncated\"), \" prop to render an ellipsis when the text exceeds the\\nwidth of the viewport or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxWidth\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Text color=\\\"gray.500\\\" isTruncated>\\n  Lorem ipsum is placeholder text commonly used in the graphic, print, and\\n  publishing industries for previewing layouts and visual mockups.\\n</Text>\\n\")), mdx(\"h3\", {\n    \"id\": \"override-style\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Override style\"), mdx(\"p\", null, \"You can change the entire style of the text via props. For example, to change\\nthe font size, pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fontSize\"), \" prop. No need to write \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"css\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled()\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Text fontSize=\\\"50px\\\" color=\\\"tomato\\\">\\n  I'm using a custom font-size value for this text\\n</Text>\\n\")), mdx(\"h3\", {\n    \"id\": \"override-the-element\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Override the element\"), mdx(\"p\", null, \"To override the element that gets rendered, pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"as\"), \" prop. Use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Inspect\\nElement\"), \" to see the element that gets rendered in html.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<>\\n  <Text as=\\\"i\\\">Italic</Text>\\n  <br />\\n  <Text as=\\\"u\\\">Underline</Text>\\n  <br />\\n  <Text as=\\\"abbr\\\">I18N</Text>\\n  <br />\\n  <Text as=\\\"cite\\\">Citation</Text>\\n  <br />\\n  <Text as=\\\"del\\\">Deleted</Text>\\n  <br />\\n  <Text as=\\\"em\\\">Emphasis</Text>\\n  <br />\\n  <Text as=\\\"ins\\\">Inserted</Text>\\n  <br />\\n  <Text as=\\\"kbd\\\">Ctrl + C</Text>\\n  <br />\\n  <Text as=\\\"mark\\\">Highlighted</Text>\\n  <br />\\n  <Text as=\\\"s\\\">Strikethrough</Text>\\n  <br />\\n  <Text as=\\\"samp\\\">Sample</Text>\\n  <br />\\n  <Text as=\\\"sub\\\">sub</Text>\\n  <br />\\n  <Text as=\\\"sup\\\">sup</Text>\\n</>\\n\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"p\", null, \"Text composes the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/box\"\n  }), \"Box\"), \" component, so you can pass all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" style props.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Text","description":null},"tableOfContents":{"items":[{"url":"#text","title":"Text","items":[{"url":"#import","title":"Import"},{"url":"#changing-the-font-size","title":"Changing the font size","items":[{"url":"#truncate-text","title":"Truncate text"},{"url":"#override-style","title":"Override style"},{"url":"#override-the-element","title":"Override the element"}]},{"url":"#props","title":"Props"}]}]}}},"pageContext":{"slug":"/docs/components/text","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/tag.mdx","frontmatter":{"title":"Tag","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/tag"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/docs/components/textarea.mdx","frontmatter":{"title":"Textarea","order":null},"fields":{"collection":"docs/components","slug":"/docs/components/textarea"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/docs/components/text.mdx"}}}