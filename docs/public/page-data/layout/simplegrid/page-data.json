{"componentChunkName":"component---src-templates-docs-js","path":"/layout/simplegrid","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"SimpleGrid\",\n  \"package\": \"@chakra-ui/layout\",\n  \"description\": \"Grid is Box with display set to grid and comes with helpful style shorthand. It renders a `div` element.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"simplegrid\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"SimpleGrid\"), mdx(\"p\", null, \"If you're like me, I tend to always check the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\"\n  }), \"MDN docs\"), \" for\\nanything css grid.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/layout\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"p\", null, \"SimpleGrid provides a friendly interface to create responsive grid layouts with\\nease. It renders a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" element with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: grid\"), \".\"), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { SimpleGrid } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"p\", null, \"Specifying the number of columns for the grid layout.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<SimpleGrid columns={2} spacing={10}>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n</SimpleGrid>\\n\")), mdx(\"p\", null, \"You can also make it responsive by passing array or object values into the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"columns\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// Passing `columns={[2, null, 3]}` and `columns={{sm: 2, md: 3}}`\\n// will have the same effect.\\n\\n<SimpleGrid columns={[2, null, 3]} spacing=\\\"40px\\\">\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n</SimpleGrid>\\n\")), mdx(\"h3\", {\n    \"id\": \"auto-responsive-grid\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Auto-responsive grid\"), mdx(\"p\", null, \"To make the grid responsive adjust automatically without passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"columns\"), \",\\nsimply pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minChildWidth\"), \" prop to specify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min-width\"), \" a child should\\nhave before adjusting the layout.\"), mdx(\"p\", null, \"This uses css grid \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auto-fit\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minmax()\"), \" internally.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<SimpleGrid minChildWidth=\\\"120px\\\" spacing=\\\"40px\\\">\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n</SimpleGrid>\\n\")), mdx(\"h3\", {\n    \"id\": \"changing-the-spacing-for-columns-and-rows\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the spacing for columns and rows\"), mdx(\"p\", null, \"Simply pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spacing\"), \" prop to change the row and column spacing between the\\ngrid items. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SimpleGrid\"), \" also allows you pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spacingX\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spacingY\"), \" to\\ndefine the space between columns and rows respectively.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<SimpleGrid columns={2} spacingX=\\\"40px\\\" spacingY=\\\"20px\\\">\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n  <Box bg=\\\"tomato\\\" height=\\\"80px\\\"></Box>\\n</SimpleGrid>\\n\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"p\", null, \"SimpleGrid composes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" so you can pass all the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" props and css grid props\\nwith addition of these:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"columns\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The number of columns\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"spacing\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"GridProps[\\\"gridGap\\\"]\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The gap between the grid items\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"spacingX\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"GridProps[\\\"gridGap\\\"]\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The column gap between the grid items\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"spacingY\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"GridProps[\\\"gridGap\\\"]\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The row gap between the grid items\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"minChildWidth\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"CSSProperties[\\\"minWidth\\\"]\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"SimpleGrid","description":"Grid is Box with display set to grid and comes with helpful style shorthand. It renders a `div` element."},"tableOfContents":{"items":[{"url":"#simplegrid","title":"SimpleGrid","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#auto-responsive-grid","title":"Auto-responsive grid"},{"url":"#changing-the-spacing-for-columns-and-rows","title":"Changing the spacing for columns and rows"}]},{"url":"#props","title":"Props"}]}]}}},"pageContext":{"slug":"/layout/simplegrid","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/layout/grid.mdx","frontmatter":{"title":"Grid","order":null},"fields":{"collection":"layout","slug":"/layout/grid"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/layout/stack.mdx","frontmatter":{"title":"Stack","order":null},"fields":{"collection":"layout","slug":"/layout/stack"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/layout/simplegrid.mdx"}}}