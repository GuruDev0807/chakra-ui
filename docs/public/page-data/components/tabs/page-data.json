{"componentChunkName":"component---src-templates-docs-js","path":"/components/tabs","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tabs\",\n  \"package\": \"@chakra-ui/tabs\",\n  \"image\": \"components/tabs.svg\",\n  \"decriptions\": \"A React component that helps you build accessible tabs, by providing keyboard interactions and ARIA attributes described in the WAI-ARIA Tab Panel Design Pattern.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"tabs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Tabs\"), mdx(\"p\", null, \"An accessible tabs component that provides keyboard interactions and ARIA\\nattributes described in the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel\"\n  }), \"WAI-ARIA Tabs Design Pattern\"), \".\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/tabs\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Tabs, TabList, TabPanels, Tab, TabPanel } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Tabs\"), \": Provides context and state for all components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"TabList\"), \": Wrapper for the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Tab\"), \" components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Tab\"), \": element that serves as a label for one of the tab panels and can be\\nactivated to display that panel.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"TabPanels\"), \": Wrapper for the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TabPanel\"), \" components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"TabPanel\"), \": element that contains the content associated with a tab\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"p\", null, \"You can render any element within \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tabs\"), \", but \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabList\"), \" should only have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tab\"), \"\\nas children, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabPanels\"), \" should have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabPanel\"), \" as children.\"), mdx(\"p\", null, \"Tabs expects \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabList\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabPanels\"), \" as children. The order doesn't matter,\\nyou can have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabList\"), \" at the top, at the bottom, or both.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tabs>\\n  <TabList>\\n    <Tab>One</Tab>\\n    <Tab>Two</Tab>\\n    <Tab>Three</Tab>\\n  </TabList>\\n\\n  <TabPanels>\\n    <TabPanel>\\n      <p>one!</p>\\n    </TabPanel>\\n    <TabPanel>\\n      <p>two!</p>\\n    </TabPanel>\\n    <TabPanel>\\n      <p>three!</p>\\n    </TabPanel>\\n  </TabPanels>\\n</Tabs>\\n\")), mdx(\"h3\", {\n    \"id\": \"tab-variants-and-color\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Tab variants and color\"), mdx(\"p\", null, \"Tabs come in 6 different variants to style the tabs: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"line\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enclosed\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enclosed-colored\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"soft-rounded\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"solid-rounded\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tabs variant=\\\"enclosed\\\">\\n  <TabList>\\n    <Tab>One</Tab>\\n    <Tab>Two</Tab>\\n  </TabList>\\n  <TabPanels>\\n    <TabPanel>\\n      <p>one!</p>\\n    </TabPanel>\\n    <TabPanel>\\n      <p>two!</p>\\n    </TabPanel>\\n  </TabPanels>\\n</Tabs>\\n\")), mdx(\"p\", null, \"You can also change the color scheme for any specific variant by passing the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colorScheme\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colorScheme\"), \" must exist in the theme object, and must be a key\\nin \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.colors\"), \" that has the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"50\"), \" - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"900\"), \" color values.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tabs variant=\\\"soft-rounded\\\" colorScheme=\\\"green\\\">\\n  <TabList>\\n    <Tab>Tab 1</Tab>\\n    <Tab>Tab 2</Tab>\\n  </TabList>\\n  <TabPanels>\\n    <TabPanel>\\n      <p>one!</p>\\n    </TabPanel>\\n    <TabPanel>\\n      <p>two!</p>\\n    </TabPanel>\\n  </TabPanels>\\n</Tabs>\\n\")), mdx(\"h3\", {\n    \"id\": \"tab-sizes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Tab sizes\"), mdx(\"p\", null, \"You can change the size of the tab by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop. We support 3 sizes\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"md\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lg\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tabs size=\\\"md\\\" variant=\\\"enclosed\\\">\\n  <TabList>\\n    <Tab>One</Tab>\\n    <Tab>Two</Tab>\\n  </TabList>\\n  <TabPanels>\\n    <TabPanel>\\n      <p>one!</p>\\n    </TabPanel>\\n    <TabPanel>\\n      <p>two!</p>\\n    </TabPanel>\\n  </TabPanels>\\n</Tabs>\\n\")), mdx(\"h3\", {\n    \"id\": \"changing-the-tabs-alignment\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Changing the tabs alignment\"), mdx(\"p\", null, \"You can change the alignment of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabList\"), \" by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"align\"), \" prop. We\\nsupport 3 sizes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"center\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tabs align=\\\"end\\\" variant=\\\"enclosed\\\">\\n  <TabList>\\n    <Tab>One</Tab>\\n    <Tab>Two</Tab>\\n  </TabList>\\n  <TabPanels>\\n    <TabPanel>\\n      <p>one!</p>\\n    </TabPanel>\\n    <TabPanel>\\n      <p>two!</p>\\n    </TabPanel>\\n  </TabPanels>\\n</Tabs>\\n\")), mdx(\"h3\", {\n    \"id\": \"fitted-tabs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Fitted Tabs\"), mdx(\"p\", null, \"Stretch the tab list to fit the container by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isFitted\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tabs isFitted variant=\\\"enclosed\\\">\\n  <TabList mb=\\\"1em\\\">\\n    <Tab>One</Tab>\\n    <Tab>Two</Tab>\\n  </TabList>\\n  <TabPanels>\\n    <TabPanel>\\n      <p>one!</p>\\n    </TabPanel>\\n    <TabPanel>\\n      <p>two!</p>\\n    </TabPanel>\\n  </TabPanels>\\n</Tabs>\\n\")), mdx(\"h3\", {\n    \"id\": \"styling-the-tab-states-via-props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Styling the tab states via props\"), mdx(\"p\", null, \"In event you need to create custom styles for the tabs. Simply set the variant\\nto \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unstyled\"), \", and use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_selected\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_hover\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_active\"), \" style props.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tabs variant=\\\"unstyled\\\">\\n  <TabList>\\n    <Tab _selected={{ color: \\\"white\\\", bg: \\\"blue.500\\\" }}>Tab 1</Tab>\\n    <Tab _selected={{ color: \\\"white\\\", bg: \\\"green.400\\\" }}>Tab 2</Tab>\\n  </TabList>\\n  <TabPanels>\\n    <TabPanel>\\n      <p>one!</p>\\n    </TabPanel>\\n    <TabPanel>\\n      <p>two!</p>\\n    </TabPanel>\\n  </TabPanels>\\n</Tabs>\\n\")), mdx(\"h3\", {\n    \"id\": \"tabs-onchange\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Tabs onChange\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" callback returns the active tab's index whenever the user changes\\ntabs. If you intend to control the tabs programmatically, use this with the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function Example() {\\n  const colors = [\\\"red.50\\\", \\\"teal.50\\\", \\\"blue.50\\\"]\\n  const [tabIndex, setTabIndex] = React.useState(0)\\n  const bg = colors[tabIndex]\\n  return (\\n    <Tabs onChange={(index) => setTabIndex(index)} bg={bg}>\\n      <TabList>\\n        <Tab>Red</Tab>\\n        <Tab>Teal</Tab>\\n        <Tab>Blue</Tab>\\n      </TabList>\\n      <TabPanels p=\\\"2rem\\\">\\n        <TabPanel>The Primary Colors</TabPanel>\\n        <TabPanel>Are 1, 2, 3</TabPanel>\\n        <TabPanel>Red, yellow and blue.</TabPanel>\\n      </TabPanels>\\n    </Tabs>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"make-a-tab-initially-active\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Make a tab initially active\"), mdx(\"p\", null, \"If you want a tab to be initially active, simply pass the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultIndex\"), \" prop\\nand set it to the index of that tab.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tabs defaultIndex={1}>\\n  <TabPanels>\\n    <TabPanel>\\n      <Image\\n        boxSize=\\\"200px\\\"\\n        fit=\\\"cover\\\"\\n        src=\\\"https://resizing.flixster.com/wTgvsiM8vNLhCcCH-6ovV8n5z5U=/300x300/v1.bjsyMDkxMzI5O2o7MTgyMDQ7MTIwMDsxMjAwOzkwMA\\\"\\n      />\\n    </TabPanel>\\n    <TabPanel>\\n      <Image\\n        boxSize=\\\"200px\\\"\\n        fit=\\\"cover\\\"\\n        src=\\\"https://vignette.wikia.nocookie.net/naruto/images/2/21/Sasuke_Part_1.png/revision/latest?cb=20170716092103\\\"\\n      />\\n    </TabPanel>\\n  </TabPanels>\\n  <TabList>\\n    <Tab>Naruto</Tab>\\n    <Tab>Sasuke</Tab>\\n  </TabList>\\n</Tabs>\\n\")), mdx(\"h3\", {\n    \"id\": \"make-a-tab-disabled\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Make a Tab disabled\"), mdx(\"p\", null, \"When a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tab\"), \" is disabled, it's skipped during keyboard navigation and it's not\\nclickable.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function Example() {\\n  return (\\n    <Tabs>\\n      <TabList>\\n        <Tab>One</Tab>\\n        <Tab isDisabled>Two</Tab>\\n        <Tab>Three</Tab>\\n      </TabList>\\n      <TabPanels>\\n        <TabPanel>1</TabPanel>\\n        <TabPanel>2</TabPanel>\\n        <TabPanel>3</TabPanel>\\n      </TabPanels>\\n    </Tabs>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"tabs-with-manual-activation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Tabs with manual activation\"), mdx(\"p\", null, \"By default, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tabs\"), \" are activated automatically. This means when you use the\\narrow keys to change tabs, the tab is activated and focused.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The content of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabPanel\"), \" should ideally be preloaded. However, if switching\\nto a tab panel causes a network request and possibly a page refresh, there\\nmight be some noticable latency and this might affect the experience for\\nkeyboard and screen reader users.\")), mdx(\"p\", null, \"In this scenario, you should use a manually activated tab, it moves focus\\nwithout activating the tabs. With focus on a specific tab, users can activate a\\ntab by pressing \", mdx(\"kbd\", null, \"Space\"), \" or \", mdx(\"kbd\", null, \"Enter\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tabs isManual variant=\\\"enclosed\\\">\\n  <TabList>\\n    <Tab>One</Tab>\\n    <Tab>Two</Tab>\\n  </TabList>\\n  <TabPanels>\\n    <TabPanel>\\n      <p>one!</p>\\n    </TabPanel>\\n    <TabPanel>\\n      <p>two!</p>\\n    </TabPanel>\\n  </TabPanels>\\n</Tabs>\\n\")), mdx(\"h3\", {\n    \"id\": \"controlled-tabs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Controlled Tabs\"), mdx(\"p\", null, \"Like form inputs, a tab's state can be controlled. Make sure to include an\\nonChange as well, or else the tabs will not be interactive.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function ControlledExample() {\\n  const [tabIndex, setTabIndex] = React.useState(0)\\n\\n  const handleSliderChange = (event) => {\\n    setTabIndex(parseInt(event.target.value, 10))\\n  }\\n\\n  const handleTabsChange = (index) => {\\n    setTabIndex(index)\\n  }\\n\\n  return (\\n    <Box>\\n      <input\\n        type=\\\"range\\\"\\n        min=\\\"0\\\"\\n        max=\\\"2\\\"\\n        value={tabIndex}\\n        onChange={handleSliderChange}\\n      />\\n\\n      <Tabs index={tabIndex} onChange={handleTabsChange}>\\n        <TabList>\\n          <Tab>One</Tab>\\n          <Tab>Two</Tab>\\n          <Tab>Three</Tab>\\n        </TabList>\\n        <TabPanels>\\n          <TabPanel>\\n            <p>Click the tabs or pull the slider around</p>\\n          </TabPanel>\\n          <TabPanel>\\n            <p>Yeah yeah. What's up?</p>\\n          </TabPanel>\\n          <TabPanel>\\n            <p>Oh, hello there.</p>\\n          </TabPanel>\\n        </TabPanels>\\n      </Tabs>\\n    </Box>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"creating-custom-tab-components\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Creating custom tab components\"), mdx(\"p\", null, \"Because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabList\"), \" needs to know the order of the children, we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cloneElement\"), \"\\nto pass state internally. Your custom \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tab\"), \" component must use\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.forwardRef\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function CustomTabs() {\\n  // 1. Reuse the styles for the Tab\\n  const StyledTab = chakra(\\\"button\\\", { themeKey: \\\"Tabs.Tab\\\" })\\n\\n  const CustomTab = React.forwardRef((props, ref) => {\\n    // 2. Reuse the `useTab` hook\\n    const tabProps = useTab(props)\\n    const isSelected = !!tabProps[\\\"aria-selected\\\"]\\n\\n    // 3. Hook into the Tabs `size`, `variant`, props\\n    const theming = useTabsThemingContext()\\n\\n    return (\\n      <StyledTab {...theming} {...tabProps}>\\n        <Box as=\\\"span\\\" mr=\\\"2\\\">\\n          {isSelected ? \\\"\\uD83D\\uDE0E\\\" : \\\"\\uD83D\\uDE10\\\"}\\n        </Box>\\n        {tabProps.children}\\n      </StyledTab>\\n    )\\n  })\\n\\n  return (\\n    <Tabs>\\n      <TabList>\\n        <CustomTab>One</CustomTab>\\n        <CustomTab>Two</CustomTab>\\n      </TabList>\\n      <TabPanels>\\n        <TabPanel>1</TabPanel>\\n        <TabPanel>2</TabPanel>\\n      </TabPanels>\\n    </Tabs>\\n  )\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"datatabs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"DataTabs\"), mdx(\"p\", null, \"If you'd like to drive your tabs with an array instead of using the granular\\ncomponents, you can create your own DataTabs component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function Example() {\\n  // 1. Create the component\\n  function DataTabs({ data }) {\\n    return (\\n      <Tabs>\\n        <TabList>\\n          {data.map((tab, index) => (\\n            <Tab key={index}>{tab.label}</Tab>\\n          ))}\\n        </TabList>\\n        <TabPanels>\\n          {data.map((tab, index) => (\\n            <TabPanel p={4} key={index}>\\n              {tab.content}\\n            </TabPanel>\\n          ))}\\n        </TabPanels>\\n      </Tabs>\\n    )\\n  }\\n\\n  // 2. Create an array of data\\n  const tabData = [\\n    {\\n      label: \\\"Nigerian Jollof\\\",\\n      content: \\\"Perhaps the greatest dish ever invented.\\\",\\n    },\\n    {\\n      label: \\\"Pounded Yam & Egusi\\\",\\n      content:\\n        \\\"Perhaps the surest dish ever invented but fills the stomach more than rice.\\\",\\n    },\\n  ]\\n\\n  // 3. Pass the props and chill!\\n  return <DataTabs data={tabData} />\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accessibility\"), mdx(\"h3\", {\n    \"id\": \"keyboard\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Keyboard\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Key\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Action\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ArrowLeft\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Moves focus to the next tab\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ArrowUp\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Moves focus to the previous tab\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Tab\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"When focus moves into the tab list, places focus on the active tab element\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Space\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Enter\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Activates the tab if it was not activated automatically on focus\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Home\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Moves focus to the first tab\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"End\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Moves focus to the last tab\")))), mdx(\"h3\", {\n    \"id\": \"aria-roles\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"ARIA roles\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Component\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Aria\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Usage\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Tab\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"role=\\\"tab\\\"\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Indicates that it's a tab\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-selected\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \" a tab is selected and all other Tabs have it set to \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\"), \".\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-controls\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Set to the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\"), \" of its associated \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"TabPanel\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"TabList\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\"), \" of the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"TabPanel\"), \" that's referencd by its associated \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Tab\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-orientation\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Set to vertical or horizontal based on the value of the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"orientation\"), \" prop.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"role=\\\"tablist\\\"\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Indicates that it's a tablist\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"aria-labelledby\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Set to the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\"), \" of the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Tab\"), \" that labels the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"TabPanel\"), \".\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Tabs","description":null},"tableOfContents":{"items":[{"url":"#tabs","title":"Tabs","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#tab-variants-and-color","title":"Tab variants and color"},{"url":"#tab-sizes","title":"Tab sizes"},{"url":"#changing-the-tabs-alignment","title":"Changing the tabs alignment"},{"url":"#fitted-tabs","title":"Fitted Tabs"},{"url":"#styling-the-tab-states-via-props","title":"Styling the tab states via props"},{"url":"#tabs-onchange","title":"Tabs onChange"},{"url":"#make-a-tab-initially-active","title":"Make a tab initially active"},{"url":"#make-a-tab-disabled","title":"Make a Tab disabled"},{"url":"#tabs-with-manual-activation","title":"Tabs with manual activation"},{"url":"#controlled-tabs","title":"Controlled Tabs"},{"url":"#creating-custom-tab-components","title":"Creating custom tab components"},{"url":"#datatabs","title":"DataTabs"}]},{"url":"#accessibility","title":"Accessibility","items":[{"url":"#keyboard","title":"Keyboard"},{"url":"#aria-roles","title":"ARIA roles"}]}]}]}}},"pageContext":{"slug":"/components/tabs","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/switch.mdx","frontmatter":{"title":"Switch","order":null},"fields":{"collection":"components","slug":"/components/switch"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/tag.mdx","frontmatter":{"title":"Tag","order":null},"fields":{"collection":"components","slug":"/components/tag"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/components/tabs.mdx"}}}