{"componentChunkName":"component---src-templates-docs-js","path":"/components/avatar","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Avatar\",\n  \"package\": \"@chakra-ui/avatar\",\n  \"image\": \"components/avatar.svg\",\n  \"description\": \"The Avatar component is used to represent user, and displays the profile picture, initials or fallback icon.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"avatar\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Avatar\"), mdx(\"p\", null, \"The Avatar component is used to represent a user, and displays the profile\\npicture, initials or fallback icon.\"), mdx(ComponentLinks, {\n    github: {\n      url: \"#\"\n    },\n    storybook: {\n      url: \"#\"\n    },\n    npm: {\n      label: \"@chakra-ui/avatar\",\n      url: \"#\"\n    },\n    mdxType: \"ComponentLinks\"\n  }), mdx(\"p\", null, mdx(\"carbon-ad\", null)), mdx(\"h2\", {\n    \"id\": \"import\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Import\"), mdx(\"p\", null, \"Chakra UI exports 3 avatar-related components:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Avatar\"), \": The image that represents the user.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarBadge\"), \": A wrapper that displays its content on the right corner of the\\navatar.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AvatarGroup\"), \": A wrapper to stack multiple Avatars together.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Avatar, AvatarBadge } from \\\"@chakra-ui/core\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack direction=\\\"row\\\">\\n  <Avatar name=\\\"Dan Abrahmov\\\" src=\\\"https://bit.ly/dan-abramov\\\" />\\n  <Avatar name=\\\"Kola Tioluwani\\\" src=\\\"https://bit.ly/tioluwani-kolawole\\\" />\\n  <Avatar name=\\\"Kent Dodds\\\" src=\\\"https://bit.ly/kent-c-dodds\\\" />\\n  <Avatar name=\\\"Ryan Florence\\\" src=\\\"https://bit.ly/ryan-florence\\\" />\\n  <Avatar name=\\\"Prosper Otemuyiwa\\\" src=\\\"https://bit.ly/prosper-baba\\\" />\\n  <Avatar name=\\\"Christian Nwamba\\\" src=\\\"https://bit.ly/code-beast\\\" />\\n  <Avatar name=\\\"Segun Adebayo\\\" src=\\\"https://bit.ly/sage-adebayo\\\" />\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"avatar-sizes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Avatar Sizes\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Avatar\"), \" component comes in 7 sizes.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack direction=\\\"row\\\">\\n  <Avatar size=\\\"2xs\\\" name=\\\"Dan Abrahmov\\\" src=\\\"https://bit.ly/dan-abramov\\\" />\\n  <Avatar\\n    size=\\\"xs\\\"\\n    name=\\\"Kola Tioluwani\\\"\\n    src=\\\"https://bit.ly/tioluwani-kolawole\\\"\\n  />\\n  <Avatar size=\\\"sm\\\" name=\\\"Kent Dodds\\\" src=\\\"https://bit.ly/kent-c-dodds\\\" />\\n  <Avatar size=\\\"md\\\" name=\\\"Ryan Florence\\\" src=\\\"https://bit.ly/ryan-florence\\\" />\\n  <Avatar\\n    size=\\\"lg\\\"\\n    name=\\\"Prosper Otemuyiwa\\\"\\n    src=\\\"https://bit.ly/prosper-baba\\\"\\n  />\\n  <Avatar size=\\\"xl\\\" name=\\\"Christian Nwamba\\\" src=\\\"https://bit.ly/code-beast\\\" />\\n  <Avatar size=\\\"2xl\\\" name=\\\"Segun Adebayo\\\" src=\\\"https://bit.ly/sage-adebayo\\\" />\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"avatar-fallbacks\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Avatar Fallbacks\"), mdx(\"p\", null, \"If there was an error loading the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" of the avatar, there are 2 fallbacks:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If there's a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"name\"), \" prop, we use it to generate the initials and a random,\\naccessible background color.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If there's no \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"name\"), \" prop, we use a default avatar.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack direction=\\\"row\\\">\\n  <Avatar name=\\\"Oshigaki Kisame\\\" src=\\\"https://bit.ly/broken-link\\\" />\\n  <Avatar name=\\\"Sasuke Uchiha\\\" src=\\\"https://bit.ly/broken-link\\\" />\\n  <Avatar src=\\\"https://bit.ly/broken-link\\\" />\\n</Stack>\\n\")), mdx(\"h3\", {\n    \"id\": \"customize-the-fallback-avatar\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Customize the fallback avatar\"), mdx(\"p\", null, \"You can customize the background color and icon of the fallback avatar icon to\\nmatch your design requirements.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To update the background, pass the usual \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bg\"), \" prop\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To update the icon svg, pass the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"icon\"), \" prop\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<AvatarGroup spacing=\\\"1rem\\\">\\n  <Avatar bg=\\\"red.500\\\" icon={<AiOutlineUser fontSize=\\\"1.5rem\\\" />} />\\n  <Avatar bg=\\\"teal.500\\\" />\\n</AvatarGroup>\\n\")), mdx(\"h3\", {\n    \"id\": \"avatar-with-badge\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Avatar with badge\"), mdx(\"p\", null, \"In some products, you might need to show a badge on the right corner of the\\navatar, which we call a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"badge\"), \". Here's an example that shows if the user is\\nonline:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Stack direction=\\\"row\\\" spacing={4}>\\n  <Avatar>\\n    <AvatarBadge boxSize=\\\"1.25em\\\" bg=\\\"green.500\\\" />\\n  </Avatar>\\n\\n  {/* You can also change the borderColor and bg of the badge */}\\n  <Avatar>\\n    <AvatarBadge borderColor=\\\"papayawhip\\\" bg=\\\"tomato\\\" boxSize=\\\"1.25em\\\" />\\n  </Avatar>\\n</Stack>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note the use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"em\"), \" for the size of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AvatarBadge\"), \". This is useful to size\\nthe badge relative to the avatar font size.\")), mdx(\"h3\", {\n    \"id\": \"avatargroup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"AvatarGroup\"), mdx(\"p\", null, \"In some cases, you might need to stack avatars as a group. Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AvatarGroup\"), \"\\ncomponent.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To limit the amount of avatars to show, use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"max\"), \" prop. It'll truncate the\\navatars and show a \\\"+X\\\" label (where X is the remaining avatars).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To size all the avatars equally, pass the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"size\"), \" prop.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To adjust the spacing between the avatars, pass the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"spacing\"), \" prop.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<AvatarGroup size=\\\"md\\\" max={2}>\\n  <Avatar name=\\\"Ryan Florence\\\" src=\\\"https://bit.ly/ryan-florence\\\" />\\n  <Avatar name=\\\"Segun Adebayo\\\" src=\\\"https://bit.ly/sage-adebayo\\\" />\\n  <Avatar name=\\\"Kent Dodds\\\" src=\\\"https://bit.ly/kent-c-dodds\\\" />\\n  <Avatar name=\\\"Prosper Otemuyiwa\\\" src=\\\"https://bit.ly/prosper-baba\\\" />\\n  <Avatar name=\\\"Christian Nwamba\\\" src=\\\"https://bit.ly/code-beast\\\" />\\n</AvatarGroup>\\n\")), mdx(\"h2\", {\n    \"id\": \"props\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Props\"), mdx(\"p\", null, \"The Avatar component composes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \" component so you can pass props for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Box\"), \".\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Name\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Default\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"size\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"2xs\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"xs\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"lg\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"xl\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"2xl\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"md\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The size of the avatar\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"showBorder\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"If \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"true\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Avatar\"), \" will show a border around it. Best for a group of avatars\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"name\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The name of the user in the avatar\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"src\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The image url of the \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Avatar\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"icon\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactElement\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The icon to use for the fallback avatar\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"children\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"The badge at the bottom right corner of the Avatar.\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Avatar","description":"The Avatar component is used to represent user, and displays the profile picture, initials or fallback icon."},"tableOfContents":{"items":[{"url":"#avatar","title":"Avatar","items":[{"url":"#import","title":"Import"},{"url":"#usage","title":"Usage","items":[{"url":"#avatar-sizes","title":"Avatar Sizes"},{"url":"#avatar-fallbacks","title":"Avatar Fallbacks"},{"url":"#customize-the-fallback-avatar","title":"Customize the fallback avatar"},{"url":"#avatar-with-badge","title":"Avatar with badge"},{"url":"#avatargroup","title":"AvatarGroup"}]},{"url":"#props","title":"Props"}]}]}}},"pageContext":{"slug":"/components/avatar","layout":"docs","previous":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/alertdialog.mdx","frontmatter":{"title":"Alert Dialog","order":null},"fields":{"collection":"components","slug":"/components/alertdialog"}},"next":{"fileAbsolutePath":"/Users/tioluwani/Documents/Projects/chakra-ui/docs/pages/components/badge.mdx","frontmatter":{"title":"Badge","order":null},"fields":{"collection":"components","slug":"/components/badge"}},"modifiedTime":"June 11, 2020","relativePath":"/docs/pages/components/avatar.mdx"}}}